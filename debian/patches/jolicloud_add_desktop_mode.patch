Index: src/chrome/browser/browser.cc
===================================================================
--- src.orig/chrome/browser/browser.cc
+++ src/chrome/browser/browser.cc
@@ -213,6 +213,7 @@
       block_command_execution_(false),
       last_blocked_command_id_(-1),
       last_blocked_command_disposition_(CURRENT_TAB),
+      kill_signal_(0),
       pending_web_app_action_(NONE),
       extension_app_(NULL) {
   registrar_.Add(this, NotificationType::SSL_VISIBLE_STATE_CHANGED,
@@ -317,6 +318,13 @@
 }
 
 // static
+Browser* Browser::CreateForDesktop(Profile* profile) {
+  Browser* browser = new Browser(TYPE_NORMAL_DESKTOP, profile);
+  browser->CreateBrowserWindow();
+  return browser;
+}
+
+// static
 Browser* Browser::CreateForPopup(Type type,
                                  Profile* profile,
                                  TabContents* new_contents,
@@ -368,6 +376,15 @@
 }
 
 // static
+Browser* Browser::CreateForAppDesktop(const std::string& app_name,
+                                      Profile* profile) {
+  Browser* browser = new Browser(TYPE_APP_DESKTOP, profile);
+  browser->app_name_ = app_name;
+  browser->CreateBrowserWindow();
+  return browser;
+}
+
+// static
 Browser* Browser::CreateForDevTools(Profile* profile) {
   Browser* browser = new Browser(TYPE_DEVTOOLS, profile);
   browser->app_name_ = DevToolsWindow::kDevToolsApp;
@@ -517,7 +534,7 @@
     case extension_misc::LAUNCH_WINDOW:
     case extension_misc::LAUNCH_PANEL:
       tab = Browser::OpenApplicationWindow(profile, extension, container,
-                                           GURL(), empty_icon);
+                                           GURL(), empty_icon, false);
       break;
     case extension_misc::LAUNCH_TAB: {
       tab = Browser::OpenApplicationTab(profile, extension, existing_tab);
@@ -536,7 +553,8 @@
     Extension* extension,
     extension_misc::LaunchContainer container,
     const GURL& url_input,
-    const FilePath& icon_id) {
+    const FilePath& icon_id,
+    bool as_desktop) {
   GURL url;
   if (!url_input.is_empty()) {
     if (extension)
@@ -552,8 +570,11 @@
   RegisterAppPrefs(app_name);
 
   bool as_panel = extension && (container == extension_misc::LAUNCH_PANEL);
-  Browser* browser = Browser::CreateForApp(app_name, extension, profile,
-                                           as_panel);
+  Browser* browser;
+  if (as_desktop)
+      browser = Browser::CreateForAppDesktop(app_name, profile);
+  else
+      browser = Browser::CreateForApp(app_name, extension, profile, as_panel);
 
   // save icon-id value for later use by UpdateWindowIcon
   if (!icon_id.empty()) {
@@ -563,6 +584,9 @@
       prefs->SetFilePath(icon_pref_key.c_str(), icon_id);
   }
 
+  if (browser->type_ & TYPE_DESKTOP)
+    browser->window()->SetDesktop();
+
   TabContents* contents =
       browser->AddSelectedTabWithURL(url, PageTransition::START_PAGE);
   contents->GetMutableRendererPrefs()->can_accept_load_drops = false;
@@ -587,9 +611,9 @@
 }
 
 // static
-TabContents* Browser::OpenApplicationWindow(Profile* profile, GURL& url) {
+TabContents* Browser::OpenApplicationWindow(Profile* profile, GURL& url, const FilePath& icon_id, bool as_desktop) {
   return OpenApplicationWindow(profile, NULL, extension_misc::LAUNCH_WINDOW,
-                               url), icon_id;
+                               url, icon_id, as_desktop);
 }
 
 // static
@@ -825,7 +849,9 @@
 // Browser, OnBeforeUnload handling:
 
 bool Browser::ShouldCloseWindow() {
-  if (!CanCloseWithInProgressDownloads())
+  if (!CanCloseWithInProgressDownloads()
+    || (this->type() & TYPE_DESKTOP && !kill_signal_)
+  )
     return false;
 
   if (HasCompletedUnloadProcessing())
@@ -1245,22 +1271,27 @@
   features |= FEATURE_DOWNLOADSHELF;
 #endif  // !defined(OS_CHROMEOS)
 
-  if (type() == TYPE_NORMAL) {
+  if (type() & TYPE_NORMAL) {
     features |= FEATURE_BOOKMARKBAR;
   }
 
   if (!hide_ui_for_fullscreen) {
-    if (type() != TYPE_NORMAL && type() != TYPE_EXTENSION_APP)
+    if ( ((type() & TYPE_NORMAL) == 0 ) && type() != TYPE_EXTENSION_APP)
       features |= FEATURE_TITLEBAR;
 
-    if (type() == TYPE_NORMAL || type() == TYPE_EXTENSION_APP)
+    if (type() & TYPE_NORMAL || type() == TYPE_EXTENSION_APP)
       features |= FEATURE_TABSTRIP;
 
-    if (type() == TYPE_NORMAL || type() == TYPE_EXTENSION_APP)
+    if (type() & TYPE_NORMAL || type() == TYPE_EXTENSION_APP)
       features |= FEATURE_TOOLBAR;
 
     if (type() != TYPE_EXTENSION_APP && (type() & Browser::TYPE_APP) == 0)
       features |= FEATURE_LOCATIONBAR;
+
+    if (type() & TYPE_DESKTOP) {
+        features &= ~FEATURE_TITLEBAR;
+        features &= ~FEATURE_DOWNLOADSHELF;
+    }
   }
   return !!(features & feature);
 }
@@ -1548,7 +1579,7 @@
   }
   // If running the Chrome OS build, but we're not on the device, fall through
 #endif
-  BrowserList::CloseAllBrowsersAndExit();
+  BrowserList::CloseAllBrowsersAndExit(0);
 }
 
 void Browser::BookmarkCurrentPage() {
@@ -2560,7 +2591,7 @@
   // in-progress downloads.
   // Note that the next call when it returns false will ask the user for
   // confirmation before closing the browser if the user decides so.
-  return CanCloseWithInProgressDownloads();
+  return !((this->type() & TYPE_DESKTOP) && !kill_signal_) && CanCloseWithInProgressDownloads();
 }
 
 bool Browser::CanBookmarkAllTabs() const {
@@ -3028,6 +3059,10 @@
     return;
   }
 
+  if (this->type_ & TYPE_DESKTOP && !this->kill_signal_) {
+    proceed = false;
+  }
+
   if (!proceed) {
     CancelWindowClose();
     *proceed_to_fire_unload = false;
Index: src/chrome/browser/browser.h
===================================================================
--- src.orig/chrome/browser/browser.h
+++ src/chrome/browser/browser.h
@@ -75,14 +75,17 @@
     // using some other system (eg some web standard), maybe we should
     // generalize this name to TYPE_MULTITAB or something.
     TYPE_EXTENSION_APP = 8,
+    TYPE_DESKTOP = 32,
+    TYPE_NORMAL_DESKTOP = TYPE_DESKTOP | TYPE_NORMAL,
+    TYPE_APP_DESKTOP = TYPE_DESKTOP | TYPE_APP,
     TYPE_APP_POPUP = TYPE_APP | TYPE_POPUP,
-    TYPE_DEVTOOLS = TYPE_APP | 16,
+    TYPE_DEVTOOLS = TYPE_APP | 64,
 
     // TODO(skerner): crbug/56776: Until the panel UI is complete on all
     // platforms, apps that set app.launch.container = "panel" have type
     // APP_POPUP. (see Browser::CreateForApp)
     // NOTE: TYPE_APP_PANEL is a superset of TYPE_APP_POPUP.
-    TYPE_APP_PANEL = TYPE_APP | TYPE_POPUP | 32,
+    TYPE_APP_PANEL = TYPE_APP | TYPE_POPUP | 128,
     TYPE_ANY = TYPE_NORMAL |
                TYPE_POPUP |
                TYPE_APP |
@@ -131,6 +134,11 @@
   // window is created by this function call.
   static Browser* Create(Profile* profile);
 
+  // Creates a normal tabbed browser with the specified profile, but set as
+  // the user's desktop. The Browser's window is created by this function
+  // call.
+  static Browser* CreateForDesktop(Profile* profile);
+
   // Like Create, but creates a browser of the specified (popup) type, with the
   // specified contents, in a popup window of the specified size/position.
   static Browser* CreateForPopup(Type type, Profile* profile,
@@ -149,6 +157,10 @@
                                Profile* profile,
                                bool is_panel);
 
+  // Like Create, but creates a tabstrip-less and toolbar-less "app" window for
+  // the specified app, as the user's desktop.
+  static Browser* CreateForAppDesktop(const std::string& app_name, Profile* profile);
+
   // Like Create, but creates a tabstrip-less and toolbar-less
   // DevTools "app" window.
   static Browser* CreateForDevTools(Profile* profile);
@@ -177,6 +189,7 @@
 
   Type type() const { return type_; }
   Profile* profile() const { return profile_; }
+  void set_kill_signal(int signal) { kill_signal_ = signal; };
   const std::vector<std::wstring>& user_data_dir_profiles() const;
 
   // Returns the InstantController or NULL if there is no InstantController for
@@ -249,10 +262,11 @@
       Extension* extension,
       extension_misc::LaunchContainer container,
       const GURL& url,
-      const FilePath& icon_id);
+      const FilePath& icon_id,
+      bool as_desktop);
 
   // Open an application for |extension| in a new application window or panel.
-  static TabContents* OpenApplicationWindow(Profile* profile, GURL& url, const FilePath& icon_id);
+  static TabContents* OpenApplicationWindow(Profile* profile, GURL& url, const FilePath& icon_id, bool as_desktop);
 
   // Open an application for |extension| in a new application tab, or
   // |existing_tab| if not NULL.  Returns NULL if there are no appropriate
@@ -1103,6 +1117,9 @@
   // Stores the disposition type of the last blocked command.
   WindowOpenDisposition last_blocked_command_disposition_;
 
+  // Stores the kill signal used to shutdown the browser.
+  int kill_signal_;
+
   // Different types of action when web app info is available.
   // OnDidGetApplicationInfo uses this to dispatch calls.
   enum WebAppAction {
Index: src/chrome/browser/browser_init.cc
===================================================================
--- src.orig/chrome/browser/browser_init.cc
+++ src/chrome/browser/browser_init.cc
@@ -536,7 +536,8 @@
 
     if (process_startup) {
       if (browser_defaults::kOSSupportsOtherBrowsers &&
-          !command_line_.HasSwitch(switches::kNoDefaultBrowserCheck)) {
+          !command_line_.HasSwitch(switches::kNoDefaultBrowserCheck) &&
+          !IsDesktopLaunch()) {
         // Check whether we are the default browser.
         CheckDefaultBrowser(profile);
       }
@@ -597,6 +598,13 @@
   return false;
 }
 
+bool BrowserInit::LaunchWithProfile::IsDesktopLaunch() {
+  if (command_line_.HasSwitch(switches::kDesktop)) {
+    return true;
+  }
+  return false;
+}
+
 bool BrowserInit::LaunchWithProfile::OpenApplicationWindow(Profile* profile) {
   std::string url_string, app_id;
   if (!IsAppLaunch(&url_string, &app_id))
@@ -629,7 +637,7 @@
     if (policy->IsWebSafeScheme(url.scheme()) ||
         url.SchemeIs(chrome::kFileScheme)) {
       std::string icon_id(command_line_.GetSwitchValueASCII(switches::kIconId));
-      Browser::OpenApplicationWindow(profile, url, FilePath(icon_id));
+      Browser::OpenApplicationWindow(profile, url, FilePath(icon_id), IsDesktopLaunch());
       return true;
     }
   }
Index: src/chrome/browser/browser_init.h
===================================================================
--- src.orig/chrome/browser/browser_init.h
+++ src/chrome/browser/browser_init.h
@@ -132,6 +132,9 @@
     // In this case |app_url| or |app_id| are populated if they're non-null.
     bool IsAppLaunch(std::string* app_url, std::string* app_id);
 
+    // If the process was launched with the desktop flag, return true.
+    bool IsDesktopLaunch();
+
     // If IsAppLaunch is true, tries to open an application window.
     // If the app is specified to start in a tab, or IsAppLaunch is false,
     // returns false to specify default processing.
Index: src/chrome/browser/gtk/browser_titlebar.cc
===================================================================
--- src.orig/chrome/browser/gtk/browser_titlebar.cc
+++ src/chrome/browser/gtk/browser_titlebar.cc
@@ -284,7 +284,7 @@
   Singleton<GConfTitlebarListener>()->SetTitlebarButtons(this);
 
   if (browser_window_->browser()->profile()->IsOffTheRecord() &&
-      browser_window_->browser()->type() == Browser::TYPE_NORMAL) {
+      browser_window_->browser()->type() & Browser::TYPE_NORMAL) {
     GtkWidget* spy_guy = gtk_image_new_from_pixbuf(GetOTRAvatar());
     gtk_misc_set_alignment(GTK_MISC(spy_guy), 0.0, 1.0);
     GtkWidget* spy_frame = gtk_alignment_new(0.0, 0.0, 1.0, 1.0);
@@ -299,7 +299,7 @@
 
   // We use an alignment to control the titlebar height.
   titlebar_alignment_ = gtk_alignment_new(0.0, 0.0, 1.0, 1.0);
-  if (browser_window_->browser()->type() == Browser::TYPE_NORMAL) {
+  if (browser_window_->browser()->type() & Browser::TYPE_NORMAL) {
     gtk_box_pack_start(GTK_BOX(container_hbox_), titlebar_alignment_, TRUE,
                        TRUE, 0);
 
@@ -498,8 +498,8 @@
 
   // Note: this isn't browser_window_->browser()->type() & Browser::TYPE_APP
   // because we want to exclude Browser::TYPE_APP_POPUP.
-  if (browser_window_->browser()->type() == Browser::TYPE_APP ||
-      browser_window_->browser()->type() == Browser::TYPE_APP_PANEL) {
+  if (browser_window_->browser()->type() & Browser::TYPE_APP &&
+      browser_window_->browser()->type() != Browser::TYPE_APP_PANEL) {
     // Update the system app icon.  We don't need to update the icon in the top
     // left of the custom frame, that will get updated when the throbber is
     // updated.
@@ -543,8 +543,8 @@
 
     // Note: this isn't browser_window_->browser()->type() & Browser::TYPE_APP
     // because we want to exclude Browser::TYPE_APP_POPUP.
-    if (browser_window_->browser()->type() == Browser::TYPE_APP ||
-        browser_window_->browser()->type() == Browser::TYPE_APP_PANEL) {
+    if (browser_window_->browser()->type() & Browser::TYPE_APP &&
+        browser_window_->browser()->type() != Browser::TYPE_APP_PANEL) {
       SkBitmap icon = browser_window_->browser()->GetCurrentPageIcon();
       if (icon.empty()) {
         // Fallback to the Chromium icon if the page has no icon.
Index: src/chrome/browser/gtk/browser_toolbar_gtk.cc
===================================================================
--- src.orig/chrome/browser/gtk/browser_toolbar_gtk.cc
+++ src/chrome/browser/gtk/browser_toolbar_gtk.cc
@@ -651,7 +651,7 @@
 
 bool BrowserToolbarGtk::ShouldOnlyShowLocation() const {
   // If we're a popup window, only show the location bar (omnibox).
-  return browser_->type() != Browser::TYPE_NORMAL;
+  return !(browser_->type() & Browser::TYPE_NORMAL);
 }
 
 void BrowserToolbarGtk::AnimationEnded(const Animation* animation) {
Index: src/chrome/browser/gtk/browser_window_gtk.cc
===================================================================
--- src.orig/chrome/browser/gtk/browser_window_gtk.cc
+++ src/chrome/browser/gtk/browser_window_gtk.cc
@@ -788,7 +788,7 @@
 }
 
 void BrowserWindowGtk::LoadingAnimationCallback() {
-  if (browser_->type() == Browser::TYPE_NORMAL) {
+  if (browser_->type() & Browser::TYPE_NORMAL) {
     // Loading animations are shown in the tab for tabbed windows.  We check the
     // browser type instead of calling IsTabStripVisible() because the latter
     // will return false for fullscreen windows, but we still need to update
@@ -852,6 +852,21 @@
   return fullscreen_exit_bubble_.get() ? true : false;
 }
 
+void BrowserWindowGtk::SetDesktop() {
+  GdkWindow* gdkWindow;
+  XID window;
+
+  gdkWindow = GTK_WIDGET( window_ )->window;
+  window = x11_util::GetX11WindowFromGdkWindow( gdkWindow );
+  x11_util::ChangeProperty( window,
+      "_NET_WM_WINDOW_TYPE", "_NET_WM_WINDOW_TYPE_DESKTOP" );
+
+  gtk_window_stick( window_ );
+  gtk_window_maximize( window_ );
+  gtk_window_set_wmclass( window_, "desktop_window", "chromium" );
+  gtk_window_set_resizable( window_, FALSE );
+}
+
 LocationBar* BrowserWindowGtk::GetLocationBar() const {
   return toolbar_->GetLocationBar();
 }
@@ -2326,8 +2341,7 @@
 bool BrowserWindowGtk::UseCustomFrame() {
   // We don't use the custom frame for app mode windows or app window popups.
   return use_custom_frame_pref_.GetValue() &&
-      browser_->type() != Browser::TYPE_APP &&
-      browser_->type() != Browser::TYPE_APP_POPUP;
+      !(browser_->type() & Browser::TYPE_APP);
 }
 
 bool BrowserWindowGtk::BoundsMatchMonitorSize() {
Index: src/app/x11_util.cc
===================================================================
--- src.orig/app/x11_util.cc
+++ src/app/x11_util.cc
@@ -328,6 +328,36 @@
   return true;
 }
 
+bool ChangeProperty(
+    XID window, const std::string& property_name, const std::string& set_name) {
+  Atom property_atom = gdk_x11_get_xatom_by_name_for_display(
+      gdk_display_get_default(), property_name.c_str());
+  Atom set_atom = gdk_x11_get_xatom_by_name_for_display(
+      gdk_display_get_default(), set_name.c_str());
+  Atom type = XA_ATOM;
+  int format = 32;
+  int mode = PropModeReplace;
+  long unsigned int num_items = 1;
+
+  LOG(INFO) << "Setting X desktop mode hint";
+
+  int result = XChangeProperty( GDK_DISPLAY_XDISPLAY( gdk_display_get_default() ),
+                                window,
+                                property_atom,
+                                type,
+                                format,
+                                mode,
+                                (guchar*) &set_atom,
+                                num_items);
+
+  LOG(INFO) << "XChangeProperty returned: " << result;
+
+  if (result != Success)
+    return false;
+
+  return true;
+}
+
 XID GetParentWindow(XID window) {
   XID root = None;
   XID parent = None;
Index: src/app/x11_util.h
===================================================================
--- src.orig/app/x11_util.h
+++ src/app/x11_util.h
@@ -83,6 +83,8 @@
                          std::vector<int>* value);
 bool GetStringProperty(
     XID window, const std::string& property_name, std::string* value);
+bool ChangeProperty(
+    XID window, const std::string& property_name, const std::string& set_name);
 
 // Get |window|'s parent window, or None if |window| is the root window.
 XID GetParentWindow(XID window);
Index: src/chrome/browser/browser_window.h
===================================================================
--- src.orig/chrome/browser/browser_window.h
+++ src/chrome/browser/browser_window.h
@@ -127,6 +127,9 @@
   // Returns true if the fullscreen bubble is visible.
   virtual bool IsFullscreenBubbleVisible() const = 0;
 
+  // Sets the desktop-mode state
+  virtual void SetDesktop() = 0;
+
   // Returns the location bar.
   virtual LocationBar* GetLocationBar() const = 0;
 
Index: src/chrome/browser/gtk/browser_window_gtk.h
===================================================================
--- src.orig/chrome/browser/gtk/browser_window_gtk.h
+++ src/chrome/browser/gtk/browser_window_gtk.h
@@ -72,6 +72,7 @@
   virtual void SetFullscreen(bool fullscreen);
   virtual bool IsFullscreen() const;
   virtual bool IsFullscreenBubbleVisible() const;
+  virtual void SetDesktop();
   virtual LocationBar* GetLocationBar() const;
   virtual void SetFocusToLocationBar(bool select_all);
   virtual void UpdateReloadStopState(bool is_loading, bool force);
Index: src/chrome/common/chrome_switches.cc
===================================================================
--- src.orig/chrome/common/chrome_switches.cc
+++ src/chrome/common/chrome_switches.cc
@@ -118,6 +118,9 @@
 // Enables support to debug printing subsystem.
 const char kDebugPrint[]                    = "debug-print";
 
+// Specifies that the browser should be launched in "X Desktop" mode.
+const char kDesktop[]                       = "desktop";
+
 // Triggers a pletora of diagnostic modes.
 const char kDiagnostics[]                   = "diagnostics";
 
Index: src/chrome/common/chrome_switches.h
===================================================================
--- src.orig/chrome/common/chrome_switches.h
+++ src/chrome/common/chrome_switches.h
@@ -48,6 +48,7 @@
 extern const char kCloudPrintServiceURL[];
 extern const char kCountry[];
 extern const char kDebugPrint[];
+extern const char kDesktop[];
 extern const char kDiagnostics[];
 extern const char kDisableAltWinstation[];
 extern const char kDisableApplicationCache[];
Index: src/chrome/browser/browser_list.cc
===================================================================
--- src.orig/chrome/browser/browser_list.cc
+++ src/chrome/browser/browser_list.cc
@@ -223,7 +223,7 @@
 }
 
 // static
-void BrowserList::CloseAllBrowsers() {
+void BrowserList::CloseAllBrowsers(int signal) {
   bool session_ending =
       browser_shutdown::GetShutdownType() == browser_shutdown::END_SESSION;
   bool use_post = !session_ending;
@@ -251,12 +251,14 @@
   for (BrowserList::const_iterator i = BrowserList::begin();
        i != BrowserList::end();) {
     if (use_post) {
+      (*i)->set_kill_signal(signal);
       (*i)->window()->Close();
       ++i;
     } else {
       // This path is hit during logoff/power-down. In this case we won't get
       // a final message and so we force the browser to be deleted.
       Browser* browser = *i;
+      browser->set_kill_signal(signal);
       browser->window()->Close();
       // Close doesn't immediately destroy the browser
       // (Browser::TabStripEmpty() uses invoke later) but when we're ending the
@@ -276,7 +278,7 @@
 }
 
 // static
-void BrowserList::CloseAllBrowsersAndExit() {
+void BrowserList::CloseAllBrowsersAndExit(int signal) {
   NotificationService::current()->Notify(
       NotificationType::APP_EXITING,
       NotificationService::AllSources(),
@@ -284,7 +286,7 @@
 
 #if !defined(OS_MACOSX)
   // On most platforms, closing all windows causes the application to exit.
-  CloseAllBrowsers();
+  CloseAllBrowsers(signal);
 #else
   // On the Mac, the application continues to run once all windows are closed.
   // Terminate will result in a CloseAllBrowsers() call, and once (and if)
@@ -311,7 +313,7 @@
   // Write important data first.
   g_browser_process->EndSession();
 
-  BrowserList::CloseAllBrowsers();
+  BrowserList::CloseAllBrowsers(0);
 
   // Send out notification. This is used during testing so that the test harness
   // can properly shutdown before we exit.
@@ -367,7 +369,7 @@
     // (MessageLoop::current() == null).
     if (browsers_.empty() && !browser_shutdown::IsTryingToQuit() &&
         MessageLoop::current())
-      CloseAllBrowsers();
+      CloseAllBrowsers(0);
   }
 }
 
Index: src/chrome/browser/browser_process_impl.cc
===================================================================
--- src.orig/chrome/browser/browser_process_impl.cc
+++ src/chrome/browser/browser_process_impl.cc
@@ -803,7 +803,7 @@
   }
 
   DLOG(WARNING) << "Shutting down current instance of the browser.";
-  BrowserList::CloseAllBrowsersAndExit();
+  BrowserList::CloseAllBrowsersAndExit(0);
 
   // Transfer ownership to Upgrade.
   Upgrade::SetNewCommandLine(new_cl.release());
Index: src/chrome/browser/gtk/update_recommended_dialog.cc
===================================================================
--- src.orig/chrome/browser/gtk/update_recommended_dialog.cc
+++ src/chrome/browser/gtk/update_recommended_dialog.cc
@@ -61,7 +61,7 @@
     PrefService* pref_service = g_browser_process->local_state();
     pref_service->SetBoolean(prefs::kRestartLastSessionOnShutdown, true);
 
-    BrowserList::CloseAllBrowsersAndExit();
+    BrowserList::CloseAllBrowsersAndExit(0);
   }
 
   delete this;
Index: src/chrome/browser/automation/testing_automation_provider.cc
===================================================================
--- src.orig/chrome/browser/automation/testing_automation_provider.cc
+++ src/chrome/browser/automation/testing_automation_provider.cc
@@ -427,7 +427,7 @@
 
 void TestingAutomationProvider::OnChannelError() {
   if (browser_shutdown::GetShutdownType() == browser_shutdown::NOT_VALID)
-    BrowserList::CloseAllBrowsersAndExit();
+    BrowserList::CloseAllBrowsersAndExit(0);
   AutomationProvider::OnChannelError();
 }
 
Index: src/chrome/browser/background_mode_manager.cc
===================================================================
--- src.orig/chrome/browser/background_mode_manager.cc
+++ src/chrome/browser/background_mode_manager.cc
@@ -499,7 +499,7 @@
   switch (item) {
     case IDC_EXIT:
       UserMetrics::RecordAction(UserMetricsAction("Exit"), profile_);
-      BrowserList::CloseAllBrowsersAndExit();
+      BrowserList::CloseAllBrowsersAndExit(0);
       break;
     case IDC_ABOUT:
       GetBrowserWindow()->OpenAboutChromeDialog();
Index: src/chrome/browser/views/about_chrome_view.cc
===================================================================
--- src.orig/chrome/browser/views/about_chrome_view.cc
+++ src/chrome/browser/views/about_chrome_view.cc
@@ -622,7 +622,7 @@
   // Set the flag to restore the last session on shutdown.
   PrefService* pref_service = g_browser_process->local_state();
   pref_service->SetBoolean(prefs::kRestartLastSessionOnShutdown, true);
-  BrowserList::CloseAllBrowsersAndExit();
+  BrowserList::CloseAllBrowsersAndExit(0);
 #endif
 
   return true;
Index: src/chrome/browser/browser_list.h
===================================================================
--- src.orig/chrome/browser/browser_list.h
+++ src/chrome/browser/browser_list.h
@@ -100,12 +100,12 @@
   // CloseAllBrowsers(true) on platforms where the application exits when no
   // more windows are remaining.  On other platforms (the Mac), this will
   // additionally exit the application.
-  static void CloseAllBrowsersAndExit();
+  static void CloseAllBrowsersAndExit(int signal);
 
   // Closes all browsers. If the session is ending the windows are closed
   // directly. Otherwise the windows are closed by way of posting a WM_CLOSE
   // message.
-  static void CloseAllBrowsers();
+  static void CloseAllBrowsers(int signal);
 
   // Begins shutdown of the application when the Windows session is ending.
   static void WindowsSessionEnding();
Index: src/chrome/browser/dom_ui/flags_ui.cc
===================================================================
--- src.orig/chrome/browser/dom_ui/flags_ui.cc
+++ src/chrome/browser/dom_ui/flags_ui.cc
@@ -164,7 +164,7 @@
   // Set the flag to restore state after the restart.
   PrefService* pref_service = g_browser_process->local_state();
   pref_service->SetBoolean(prefs::kRestartLastSessionOnShutdown, true);
-  BrowserList::CloseAllBrowsersAndExit();
+  BrowserList::CloseAllBrowsersAndExit(0);
 }
 
 }  // namespace
Index: src/chrome/browser/views/update_recommended_message_box.cc
===================================================================
--- src.orig/chrome/browser/views/update_recommended_message_box.cc
+++ src/chrome/browser/views/update_recommended_message_box.cc
@@ -40,7 +40,7 @@
   chromeos::CrosLibrary::Get()->GetPowerLibrary()->RequestRestart();
   // If running the Chrome OS build, but we're not on the device, fall through
 #endif
-  BrowserList::CloseAllBrowsersAndExit();
+  BrowserList::CloseAllBrowsersAndExit(0);
 
   return true;
 }
Index: src/chrome/browser/browser_main_posix.cc
===================================================================
--- src.orig/chrome/browser/browser_main_posix.cc
+++ src/chrome/browser/browser_main_posix.cc
@@ -112,7 +112,7 @@
 
   if (!BrowserThread::PostTask(
       BrowserThread::UI, FROM_HERE,
-      NewRunnableFunction(BrowserList::CloseAllBrowsersAndExit))) {
+      NewRunnableFunction(BrowserList::CloseAllBrowsersAndExit, 0))) {
     // Without a UI thread to post the exit task to, there aren't many
     // options.  Raise the signal again.  The default handler will pick it up
     // and cause an ungraceful exit.
Index: src/chrome/browser/cocoa/restart_browser.mm
===================================================================
--- src.orig/chrome/browser/cocoa/restart_browser.mm
+++ src/chrome/browser/cocoa/restart_browser.mm
@@ -46,7 +46,7 @@
     // Set the flag to restore state after the restart.
     PrefService* pref_service = g_browser_process->local_state();
     pref_service->SetBoolean(prefs::kRestartLastSessionOnShutdown, true);
-    BrowserList::CloseAllBrowsersAndExit();
+    BrowserList::CloseAllBrowsersAndExit(0);
   } else {
     NOTREACHED();
   }
