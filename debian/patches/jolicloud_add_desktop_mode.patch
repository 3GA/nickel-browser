Index: src/chrome/browser/ui/browser.cc
===================================================================
--- src.orig/chrome/browser/ui/browser.cc	2012-09-26 15:41:22.170674060 +0000
+++ src/chrome/browser/ui/browser.cc	2012-09-26 15:41:22.190674058 +0000
@@ -330,6 +330,15 @@
 }
 
 // static
+Browser::CreateParams Browser::CreateParams::CreateForAppDesktop(
+    const std::string& app_name,
+    Profile* profile) {
+  CreateParams params(TYPE_DESKTOP, profile);
+  params.app_name = app_name;
+  return params;
+}
+
+// static
 Browser::CreateParams Browser::CreateParams::CreateForDevTools(
     Profile* profile) {
   CreateParams params(TYPE_POPUP, profile);
@@ -357,6 +366,7 @@
       block_command_execution_(false),
       last_blocked_command_id_(-1),
       last_blocked_command_disposition_(CURRENT_TAB),
+      kill_signal_(0),
       pending_web_app_action_(NONE),
       ALLOW_THIS_IN_INITIALIZER_LIST(
           content_setting_bubble_model_delegate_(
@@ -774,6 +784,7 @@
 #endif
       return browser_defaults::kRestorePopups || is_devtools();
     case TYPE_PANEL:
+    case TYPE_DESKTOP:
       // Do not save the window placement of panels.
       return false;
     default:
@@ -910,7 +921,9 @@
 // Browser, OnBeforeUnload handling:
 
 bool Browser::ShouldCloseWindow() {
-  if (!CanCloseWithInProgressDownloads())
+  if (!CanCloseWithInProgressDownloads()
+    || (is_type_desktop() && !kill_signal_)
+  )
     return false;
 
   if (HasCompletedUnloadProcessing())
@@ -2877,7 +2890,7 @@
     indices->clear();
     can_close_all = false;
   }
-  return can_close_all;
+  return !(is_type_desktop() && !kill_signal_) && can_close_all;
 }
 
 bool Browser::CanBookmarkAllTabs() const {
@@ -3431,6 +3444,10 @@
     return;
   }
 
+  if (is_type_desktop() && !this->kill_signal_) {
+    proceed = false;
+  }
+
   if (!proceed) {
     CancelWindowClose();
     *proceed_to_fire_unload = false;
@@ -5010,6 +5027,14 @@
 
     if (!is_app())
       features |= FEATURE_LOCATIONBAR;
+
+    if (is_type_desktop()) {
+      features &= ~FEATURE_BOOKMARKBAR;
+      features &= ~FEATURE_TITLEBAR;
+      features &= ~FEATURE_TABSTRIP;
+      features &= ~FEATURE_TOOLBAR;
+      features &= ~FEATURE_LOCATIONBAR;
+    }
   }
   return !!(features & feature);
 }
Index: src/chrome/browser/ui/browser.h
===================================================================
--- src.orig/chrome/browser/ui/browser.h	2012-09-26 15:41:22.170674060 +0000
+++ src/chrome/browser/ui/browser.h	2012-09-26 15:41:22.190674058 +0000
@@ -117,7 +117,8 @@
     // BrowserTest.StartMaximized.
     TYPE_TABBED = 1,
     TYPE_POPUP = 2,
-    TYPE_PANEL = 3
+    TYPE_PANEL = 3,
+    TYPE_DESKTOP = 4
   };
 
   // Distinguishes between browsers that host an app (opened from
@@ -187,6 +188,11 @@
                                      const gfx::Rect& window_bounds,
                                      Profile* profile);
 
+    // Like Create, but creates a tabstrip-less and toolbar-less "app" window for
+    // the specified app, as the user's desktop.
+    static CreateParams CreateForAppDesktop(const std::string& app_name,
+                                            Profile* profile);
+
     static CreateParams CreateForDevTools(Profile* profile);
 
     // The browser type.
@@ -837,6 +843,7 @@
   bool is_type_tabbed() const { return type_ == TYPE_TABBED; }
   bool is_type_popup() const { return type_ == TYPE_POPUP; }
   bool is_type_panel() const { return type_ == TYPE_PANEL; }
+  bool is_type_desktop() const { return type_ == TYPE_DESKTOP; }
 
   bool is_app() const;
   bool is_devtools() const;
@@ -1439,6 +1446,9 @@
   // Stores the disposition type of the last blocked command.
   WindowOpenDisposition last_blocked_command_disposition_;
 
+  // Stores the kill signal used to shutdown the browser.
+  int kill_signal_;
+
   // Which deferred action to perform when OnDidGetApplicationInfo is notified
   // from a WebContents. Currently, only one pending action is allowed.
   WebAppAction pending_web_app_action_;
Index: src/chrome/browser/ui/gtk/browser_window_gtk.cc
===================================================================
--- src.orig/chrome/browser/ui/gtk/browser_window_gtk.cc	2012-09-26 15:41:22.066674064 +0000
+++ src/chrome/browser/ui/gtk/browser_window_gtk.cc	2012-09-27 08:38:09.280378895 +0000
@@ -983,6 +983,42 @@
   return fullscreen_exit_bubble_ != NULL;
 }
 
+void BrowserWindowGtk::ResizeToDesktopSize() {
+  GdkScreen* gdkScreen = gtk_window_get_screen(window_);
+  GdkRectangle rect;
+
+  gdk_screen_get_monitor_geometry(gdkScreen, 0, &rect);
+
+  // Decrease the desktop size by the size of the gnome-panel.
+  // FIXME: Figure this out properly!
+  rect.y = 24;
+  rect.height -= rect.y;
+
+  gtk_window_move( window_, rect.x, rect.y );
+  gtk_window_resize( window_, rect.width, rect.height );
+}
+
+gboolean OnVisibilityNotify(GtkWindow* window, GdkEventVisibility* event,
+                             BrowserWindowGtk* browser_win) {
+  /* If we are a desktop window, this expose event may have been
+     triggered by a change in the screen dimensions, so resize.
+  */
+  if (window == browser_win->window() && gtk_window_get_type_hint(window) == GDK_WINDOW_TYPE_HINT_DESKTOP) {
+    browser_win->ResizeToDesktopSize();
+    return TRUE;
+  }
+  return FALSE;
+}
+
+void BrowserWindowGtk::SetDesktop() {
+  ResizeToDesktopSize();
+  gtk_window_activate_focus( window_ );
+  gtk_window_set_type_hint( window_, GDK_WINDOW_TYPE_HINT_DESKTOP );
+  gtk_window_set_skip_taskbar_hint( window_, FALSE );
+  gtk_window_set_skip_pager_hint( window_, FALSE );
+  g_signal_connect(G_OBJECT(window_), "visibility-notify-event", G_CALLBACK(OnVisibilityNotify), this);
+}
+
 LocationBar* BrowserWindowGtk::GetLocationBar() const {
   return toolbar_->GetLocationBar();
 }
@@ -2109,6 +2145,12 @@
 
   if (browser_->ShouldSaveWindowPlacement())
     browser_->SaveWindowPlacement(restored_bounds_, show_state);
+  else {
+    // Do not continue with SaveWindowPosition() if the previous
+    // ShouldSaveWindowPlacement() returns false, such is the case when
+    // running in desktop mode: window preference settings will crash <!>
+    return;
+  }
 
   // We also need to save the placement for startup.
   // This is a web of calls between views and delegates on Windows, but the
Index: src/ui/base/x/x11_util.cc
===================================================================
--- src.orig/ui/base/x/x11_util.cc	2012-08-19 21:55:01.000000000 +0000
+++ src/ui/base/x/x11_util.cc	2012-09-26 15:41:22.194674058 +0000
@@ -688,6 +688,36 @@
 #endif
 }
 
+bool ChangeProperty(
+    XID window, const std::string& property_name, const std::string& set_name) {
+  Atom property_atom = gdk_x11_get_xatom_by_name_for_display(
+      gdk_display_get_default(), property_name.c_str());
+  Atom set_atom = gdk_x11_get_xatom_by_name_for_display(
+      gdk_display_get_default(), set_name.c_str());
+  Atom type = XA_ATOM;
+  int format = 32;
+  int mode = PropModeReplace;
+  long unsigned int num_items = 1;
+
+  LOG(INFO) << "Setting X desktop mode hint";
+
+  int result = XChangeProperty( GDK_DISPLAY_XDISPLAY( gdk_display_get_default() ),
+                                window,
+                                property_atom,
+                                type,
+                                format,
+                                mode,
+                                (guchar*) &set_atom,
+                                num_items);
+
+  LOG(INFO) << "XChangeProperty returned: " << result;
+
+  if (result != Success)
+    return false;
+
+  return true;
+}
+
 XID GetParentWindow(XID window) {
   XID root = None;
   XID parent = None;
Index: src/ui/base/x/x11_util.h
===================================================================
--- src.orig/ui/base/x/x11_util.h	2012-08-19 21:55:01.000000000 +0000
+++ src/ui/base/x/x11_util.h	2012-09-26 15:41:22.202674059 +0000
@@ -147,6 +147,8 @@
                                     std::vector<Atom>* value);
 UI_EXPORT bool GetStringProperty(
     XID window, const std::string& property_name, std::string* value);
+bool ChangeProperty(
+    XID window, const std::string& property_name, const std::string& set_name);
 
 UI_EXPORT bool SetIntProperty(XID window,
                               const std::string& name,
Index: src/chrome/browser/ui/browser_window.h
===================================================================
--- src.orig/chrome/browser/ui/browser_window.h	2012-08-19 21:49:10.000000000 +0000
+++ src/chrome/browser/ui/browser_window.h	2012-09-26 15:41:22.202674059 +0000
@@ -158,6 +158,9 @@
   virtual bool IsInMetroSnapMode() const = 0;
 #endif
 
+  // Sets the desktop-mode state
+  virtual void SetDesktop() = 0;
+
   // Returns the location bar.
   virtual LocationBar* GetLocationBar() const = 0;
 
Index: src/chrome/browser/ui/gtk/browser_window_gtk.h
===================================================================
--- src.orig/chrome/browser/ui/gtk/browser_window_gtk.h	2012-08-19 21:48:57.000000000 +0000
+++ src/chrome/browser/ui/gtk/browser_window_gtk.h	2012-09-26 15:41:22.202674059 +0000
@@ -104,6 +104,8 @@
       FullscreenExitBubbleType bubble_type) OVERRIDE;
   virtual bool IsFullscreen() const OVERRIDE;
   virtual bool IsFullscreenBubbleVisible() const OVERRIDE;
+  void ResizeToDesktopSize();
+  virtual void SetDesktop();
   virtual LocationBar* GetLocationBar() const OVERRIDE;
   virtual void SetFocusToLocationBar(bool select_all) OVERRIDE;
   virtual void UpdateReloadStopState(bool is_loading, bool force) OVERRIDE;
Index: src/chrome/common/chrome_switches.cc
===================================================================
--- src.orig/chrome/common/chrome_switches.cc	2012-09-26 15:41:22.166674060 +0000
+++ src/chrome/common/chrome_switches.cc	2012-09-26 15:41:22.202674059 +0000
@@ -239,6 +239,9 @@
 // device management backend.
 const char kDeviceManagementUrl[]           = "device-management-url";
 
+// Specifies that the browser should be launched in "X Desktop" mode.
+const char kDesktop[]                       = "desktop";
+
 // Triggers a plethora of diagnostic modes.
 const char kDiagnostics[]                   = "diagnostics";
 
Index: src/chrome/common/chrome_switches.h
===================================================================
--- src.orig/chrome/common/chrome_switches.h	2012-09-26 15:41:22.174674060 +0000
+++ src/chrome/common/chrome_switches.h	2012-09-26 15:41:22.202674059 +0000
@@ -75,6 +75,7 @@
 extern const char kDebugDevToolsFrontend[];
 extern const char kDebugEnableFrameToggle[];
 extern const char kDebugPrint[];
+extern const char kDesktop[];
 extern const char kDeviceManagementUrl[];
 extern const char kDiagnostics[];
 extern const char kDisableAuthNegotiateCnameLookup[];
Index: src/chrome/browser/ui/panels/panel.cc
===================================================================
--- src.orig/chrome/browser/ui/panels/panel.cc	2012-08-19 21:48:53.000000000 +0000
+++ src/chrome/browser/ui/panels/panel.cc	2012-09-26 15:41:22.206674059 +0000
@@ -478,6 +478,10 @@
   return false;
 }
 
+void Panel::SetDesktop() {
+  NOTIMPLEMENTED();
+}
+
 void Panel::OnWindowAutoResized(const gfx::Size& preferred_window_size) {
   DCHECK(auto_resizable_);
   if (panel_strip_)
Index: src/chrome/browser/ui/panels/panel.h
===================================================================
--- src.orig/chrome/browser/ui/panels/panel.h	2012-08-19 21:48:53.000000000 +0000
+++ src/chrome/browser/ui/panels/panel.h	2012-09-26 15:41:22.206674059 +0000
@@ -112,6 +112,7 @@
   virtual bool IsMaximized() const OVERRIDE;
   virtual bool IsMinimized() const OVERRIDE;
   virtual bool IsFullscreen() const OVERRIDE;
+  virtual void SetDesktop() OVERRIDE;
   virtual gfx::NativeWindow GetNativeWindow() OVERRIDE;
   virtual gfx::Rect GetRestoredBounds() const OVERRIDE;
   virtual gfx::Rect GetBounds() const OVERRIDE;
Index: src/chrome/browser/ui/cocoa/browser_window_cocoa.h
===================================================================
--- src.orig/chrome/browser/ui/cocoa/browser_window_cocoa.h	2012-08-19 21:49:10.000000000 +0000
+++ src/chrome/browser/ui/cocoa/browser_window_cocoa.h	2012-09-26 15:41:22.206674059 +0000
@@ -75,6 +75,7 @@
       FullscreenExitBubbleType bubble_type) OVERRIDE;
   virtual bool IsFullscreen() const OVERRIDE;
   virtual bool IsFullscreenBubbleVisible() const OVERRIDE;
+  virtual void SetDesktop();
   virtual LocationBar* GetLocationBar() const OVERRIDE;
   virtual void SetFocusToLocationBar(bool select_all) OVERRIDE;
   virtual void UpdateReloadStopState(bool is_loading, bool force) OVERRIDE;
Index: src/chrome/browser/ui/cocoa/browser_window_cocoa.mm
===================================================================
--- src.orig/chrome/browser/ui/cocoa/browser_window_cocoa.mm	2012-08-19 21:49:10.000000000 +0000
+++ src/chrome/browser/ui/cocoa/browser_window_cocoa.mm	2012-09-26 15:41:22.206674059 +0000
@@ -326,6 +326,10 @@
   return false;
 }
 
+void BrowserWindowCocoa::SetDesktop() {
+  NOTIMPLEMENTED();
+}
+
 void BrowserWindowCocoa::ConfirmAddSearchProvider(
     TemplateURL* template_url,
     Profile* profile) {
Index: src/chrome/browser/ui/panels/panel_browser_window_cocoa.h
===================================================================
--- src.orig/chrome/browser/ui/panels/panel_browser_window_cocoa.h	2012-08-19 21:48:53.000000000 +0000
+++ src/chrome/browser/ui/panels/panel_browser_window_cocoa.h	2012-09-26 15:41:22.206674059 +0000
@@ -61,6 +61,7 @@
   virtual void FullScreenModeChanged(bool is_full_screen) OVERRIDE;
   virtual Browser* GetPanelBrowser() const OVERRIDE;
   virtual void DestroyPanelBrowser() OVERRIDE;
+  virtual void SetDesktop() OVERRIDE;
   virtual void EnsurePanelFullyVisible() OVERRIDE;
   virtual void SetPanelAlwaysOnTop(bool on_top) OVERRIDE;
   virtual void EnableResizeByMouse(bool enable) OVERRIDE;
Index: src/chrome/browser/ui/extensions/application_launch.cc
===================================================================
--- src.orig/chrome/browser/ui/extensions/application_launch.cc	2012-09-26 15:41:22.174674060 +0000
+++ src/chrome/browser/ui/extensions/application_launch.cc	2012-09-27 08:39:03.896376839 +0000
@@ -125,7 +125,7 @@
     }
     case extension_misc::LAUNCH_WINDOW:
       tab = OpenApplicationWindow(profile, extension, container,
-                                  override_url, empty_icon, NULL);
+                                  override_url, empty_icon, false, NULL);
       break;
     case extension_misc::LAUNCH_TAB: {
       tab = OpenApplicationTab(profile, extension, override_url,
@@ -167,6 +167,7 @@
     extension_misc::LaunchContainer container,
     const GURL& url_input,
     const FilePath& icon_id,
+    bool as_desktop,
     Browser** app_browser) {
   DCHECK(!url_input.is_empty() || extension);
   GURL url = UrlForExtension(extension, url_input);
@@ -189,6 +190,9 @@
     window_bounds.set_height(extension->launch_height());
   }
 
+  if (as_desktop)
+    type = Browser::TYPE_DESKTOP;
+
   Browser::CreateParams params(type, profile);
   params.app_name = app_name;
   params.initial_bounds = window_bounds;
@@ -219,6 +223,10 @@
       profile->GetPrefs()->SetFilePath(icon_pref_key.c_str(), icon_id);
   }
 
+  if (as_desktop) {
+    browser->window()->SetDesktop();
+  }
+
   TabContents* tab_contents =
       browser->AddSelectedTabWithURL(url, content::PAGE_TRANSITION_START_PAGE);
   WebContents* contents = tab_contents->web_contents();
@@ -242,6 +250,7 @@
 WebContents* OpenAppShortcutWindow(Profile* profile,
                                    const GURL& url,
                                    const FilePath& icon_id,
+                                   bool as_desktop,
                                    bool update_shortcut) {
   Browser* app_browser;
   WebContents* tab = OpenApplicationWindow(
@@ -250,6 +259,7 @@
       extension_misc::LAUNCH_WINDOW,
       url,
       icon_id,
+      as_desktop,
       &app_browser);
 
   if (!tab)
Index: src/chrome/browser/ui/extensions/application_launch.h
===================================================================
--- src.orig/chrome/browser/ui/extensions/application_launch.h	2012-09-26 15:41:22.174674060 +0000
+++ src/chrome/browser/ui/extensions/application_launch.h	2012-09-26 15:41:22.206674059 +0000
@@ -57,6 +57,7 @@
     extension_misc::LaunchContainer container,
     const GURL& url,
     const FilePath& icon_id,
+    bool as_desktop,
     Browser** app_browser);
 
 // Open |url| in an app shortcut window.  If |update_shortcut| is true,
@@ -68,6 +69,7 @@
 content::WebContents* OpenAppShortcutWindow(Profile* profile,
                                             const GURL& url,
                                             const FilePath& icon_id,
+                                            bool as_desktop,
                                             bool update_shortcut);
 
 // Open an application for |extension| using |disposition|.  Returns NULL if
Index: src/chrome/browser/ui/startup/startup_browser_creator_impl.cc
===================================================================
--- src.orig/chrome/browser/ui/startup/startup_browser_creator_impl.cc	2012-09-26 15:41:22.174674060 +0000
+++ src/chrome/browser/ui/startup/startup_browser_creator_impl.cc	2012-09-26 15:41:22.210674059 +0000
@@ -357,7 +357,8 @@
 
     if (process_startup) {
       if (browser_defaults::kOSSupportsOtherBrowsers &&
-          !command_line_.HasSwitch(switches::kNoDefaultBrowserCheck)) {
+          !command_line_.HasSwitch(switches::kNoDefaultBrowserCheck) &&
+          !IsDesktopLaunch()) {
         if (!browser::ShowAutolaunchPrompt(profile))
           browser::ShowDefaultBrowserPrompt(profile);
       }
@@ -443,6 +444,13 @@
   return (app_tab != NULL);
 }
 
+bool StartupBrowserCreatorImpl::IsDesktopLaunch() {
+  if (command_line_.HasSwitch(switches::kDesktop)) {
+    return true;
+  }
+  return false;
+}
+
 bool StartupBrowserCreatorImpl::OpenApplicationWindow(
     Profile* profile,
     content::WebContents** out_app_contents) {
@@ -510,6 +518,7 @@
           profile,
           url,
           FilePath(icon_id),
+          IsDesktopLaunch(),
           true);  // Update app info.
 
       if (out_app_contents)
Index: src/chrome/browser/ui/startup/startup_browser_creator_impl.h
===================================================================
--- src.orig/chrome/browser/ui/startup/startup_browser_creator_impl.h	2012-08-19 21:49:04.000000000 +0000
+++ src/chrome/browser/ui/startup/startup_browser_creator_impl.h	2012-09-26 15:41:22.210674059 +0000
@@ -74,6 +74,9 @@
   // In this case |app_url| or |app_id| are populated if they're non-null.
   bool IsAppLaunch(std::string* app_url, std::string* app_id);
 
+  // If the process was launched with the desktop flag, return true.
+  bool IsDesktopLaunch();
+
   // If IsAppLaunch is true, tries to open an application window.
   // If the app is specified to start in a tab, or IsAppLaunch is false,
   // returns false to specify default processing. |out_app_contents| is an
Index: src/chrome/browser/ui/panels/panel_browser_window.h
===================================================================
--- src.orig/chrome/browser/ui/panels/panel_browser_window.h	2012-08-19 21:48:53.000000000 +0000
+++ src/chrome/browser/ui/panels/panel_browser_window.h	2012-09-26 15:41:22.210674059 +0000
@@ -76,6 +76,7 @@
       const GURL& url,
       FullscreenExitBubbleType bubble_type) OVERRIDE;
   virtual bool IsFullscreenBubbleVisible() const OVERRIDE;
+  virtual void SetDesktop() OVERRIDE;
   virtual LocationBar* GetLocationBar() const OVERRIDE;
   virtual void SetFocusToLocationBar(bool select_all) OVERRIDE;
   virtual void UpdateReloadStopState(bool is_loading, bool force) OVERRIDE;
Index: src/chrome/browser/ui/panels/panel_browser_window.cc
===================================================================
--- src.orig/chrome/browser/ui/panels/panel_browser_window.cc	2012-08-19 21:48:53.000000000 +0000
+++ src/chrome/browser/ui/panels/panel_browser_window.cc	2012-09-26 15:41:22.210674059 +0000
@@ -205,6 +205,10 @@
   return false;
 }
 
+void PanelBrowserWindow::SetDesktop() {
+  NOTIMPLEMENTED();
+}
+
 LocationBar* PanelBrowserWindow::GetLocationBar() const {
 #if defined(USE_AURA)
   // TODO(stevenjb): Remove this when Aura panels are implemented post R18.
