Index: src/chrome/common/chrome_switches.cc
===================================================================
--- src.orig/chrome/common/chrome_switches.cc	2012-11-07 10:23:30.000000000 +0000
+++ src/chrome/common/chrome_switches.cc	2012-11-13 10:37:44.179746710 +0000
@@ -799,6 +799,9 @@
 // Ignores GPU blacklist.
 const char kIgnoreGpuBlacklist[]            = "ignore-gpu-blacklist";
 
+// Specifies the icon_id in order to use the correct icon.
+const char kIconId[]                        = "icon-id";
+
 // Performs importing from another browser. The value associated with this
 // setting encodes the target browser and what items to import.
 const char kImport[]                        = "import";
Index: src/chrome/browser/ui/gtk/gtk_util.cc
===================================================================
--- src.orig/chrome/browser/ui/gtk/gtk_util.cc	2012-11-07 10:20:45.000000000 +0000
+++ src/chrome/browser/ui/gtk/gtk_util.cc	2012-11-13 09:47:19.987860481 +0000
@@ -10,6 +10,7 @@
 #include <cstdarg>
 #include <map>
 
+#include "base/command_line.h"
 #include "base/environment.h"
 #include "base/i18n/rtl.h"
 #include "base/logging.h"
@@ -28,6 +29,7 @@
 #include "chrome/browser/ui/browser_window.h"
 #include "chrome/browser/ui/gtk/browser_window_gtk.h"
 #include "chrome/browser/ui/gtk/gtk_theme_service.h"
+#include "chrome/common/chrome_switches.h"
 #include "googleurl/src/gurl.h"
 #include "grit/theme_resources.h"
 #include "ui/base/gtk/gtk_compat.h"
@@ -120,17 +122,6 @@
       GetCharacterWidthForPixels(label, GPOINTER_TO_INT(pixel_width)));
 }
 
-// Ownership of |icon_list| is passed to the caller.
-GList* GetIconList() {
-  ui::ResourceBundle& rb = ui::ResourceBundle::GetSharedInstance();
-  GList* icon_list = NULL;
-  icon_list = g_list_append(icon_list,
-      rb.GetNativeImageNamed(IDR_PRODUCT_LOGO_32).ToGdkPixbuf());
-  icon_list = g_list_append(icon_list,
-      rb.GetNativeImageNamed(IDR_PRODUCT_LOGO_16).ToGdkPixbuf());
-  return icon_list;
-}
-
 // Returns the avatar icon for |profile|.
 //
 // Returns NULL if there is only one profile; always returns an icon for
@@ -276,6 +267,51 @@
 
 namespace gtk_util {
 
+// Ownership of |icon_list| is passed to the caller.
+GList* ProductIconList() {
+  ResourceBundle& rb = ResourceBundle::GetSharedInstance();
+  GList* icon_list = NULL;
+  icon_list = g_list_append(icon_list,
+                            gdk_pixbuf_copy(rb.GetNativeImageNamed(IDR_PRODUCT_LOGO_32).ToGdkPixbuf()));
+  icon_list = g_list_append(icon_list,
+                            gdk_pixbuf_copy(rb.GetNativeImageNamed(IDR_PRODUCT_LOGO_16).ToGdkPixbuf()));
+  return icon_list;
+}
+
+GdkPixbuf* GetPixbufFromIconID(const std::string& icon_id) {
+  GdkPixbuf* icon_pixbuf = NULL;
+  GError* error = NULL;
+  GtkIconTheme* icon_theme = gtk_icon_theme_get_default();
+
+  if (!icon_id.empty() && gtk_icon_theme_has_icon(icon_theme, icon_id.c_str())) {
+    icon_pixbuf = gtk_icon_theme_load_icon(icon_theme, icon_id.c_str(), 64, GTK_ICON_LOOKUP_USE_BUILTIN, &error);
+    if (!icon_pixbuf) {
+      g_warning("Couldn't load icon: %s", error->message);
+      g_error_free(error);
+    }
+  }
+  return icon_pixbuf;
+}
+
+// Ownership of |icon_list| is passed to the caller.
+GList* GetIconList() {
+  GList* icon_list = NULL;
+
+  const CommandLine& parsed_command_line = *CommandLine::ForCurrentProcess();
+  const std::string& icon_id =
+      parsed_command_line.GetSwitchValueASCII(switches::kIconId);
+
+  GdkPixbuf* icon_pixbuf = GetPixbufFromIconID(icon_id);
+  if (icon_pixbuf) {
+    icon_list = g_list_append(icon_list, icon_pixbuf);
+  }
+  else {
+    icon_list = ProductIconList();
+  }
+
+  return icon_list;
+}
+
 GtkWidget* CreateLabeledControlsGroup(std::vector<GtkWidget*>* labels,
                                       const char* text, ...) {
   va_list ap;
@@ -567,7 +603,7 @@
     // case where the first window created doesn't have an icon.
     gtk_window_set_icon_name(window, kIconName);
   } else {
-    GList* icon_list = GetIconList();
+    GList* icon_list = gtk_util::ProductIconList();
     gtk_window_set_default_icon_list(icon_list);
     // Same logic applies here.
     gtk_window_set_icon_list(window, icon_list);
@@ -576,7 +612,7 @@
 }
 
 void SetWindowIcon(GtkWindow* window, Profile* profile) {
-  GList* icon_list = GetIconListWithAvatars(window, profile);
+  GList* icon_list = gtk_util::GetIconList();
   gtk_window_set_icon_list(window, icon_list);
   g_list_foreach(icon_list, reinterpret_cast<GFunc>(g_object_unref), NULL);
   g_list_free(icon_list);
Index: src/chrome/browser/ui/browser.cc
===================================================================
--- src.orig/chrome/browser/ui/browser.cc	2012-11-07 10:20:54.000000000 +0000
+++ src/chrome/browser/ui/browser.cc	2012-11-13 10:37:44.179746710 +0000
@@ -15,6 +15,7 @@
 #include "base/base_paths.h"
 #include "base/bind.h"
 #include "base/command_line.h"
+#include "base/file_path.h"
 #include "base/logging.h"
 #include "base/metrics/field_trial.h"
 #include "base/metrics/histogram.h"
@@ -378,8 +379,12 @@
       ALLOW_THIS_IN_INITIALIZER_LIST(
           command_controller_(new chrome::BrowserCommandController(this))),
       window_has_shown_(false) {
-  if (!app_name_.empty())
-    chrome::RegisterAppPrefs(app_name_, profile_);
+  if (!app_name_.empty()) {
+    if (params.type == TYPE_DESKTOP)
+      chrome::RegisterAppDesktopPrefs(app_name_, profile_);
+    else
+      chrome::RegisterAppPrefs(app_name_, profile_);
+  }
   tab_strip_model_->AddObserver(this);
 
   toolbar_model_.reset(new ToolbarModel(toolbar_model_delegate_.get()));
@@ -525,6 +530,20 @@
     select_file_dialog_->ListenerDestroyed();
 }
 
+std::string Browser::GetWindowIconKey() const {
+  std::string name(prefs::kBrowserWindowIcon);
+  if (!app_name_.empty()) {
+    name.append("_");
+    name.append(app_name_);
+  }
+  return name;
+}
+
+GURL Browser::GetURLForCurrentTab() const {
+  WebContents* contents = chrome::GetActiveWebContents(this);
+  return contents ? contents->GetURL() : GURL();
+}
+
 ///////////////////////////////////////////////////////////////////////////////
 // Getters & Setters
 
@@ -562,6 +581,13 @@
       contents->favicon_tab_helper()->GetFavicon() : gfx::Image();
 }
 
+GURL Browser::GetURLForCurrentTab() const {
+  WebContents* contents = GetActiveWebContents();
+  // |contents| can be NULL because GetWindowTitleForCurrentTab is called by the
+  // window during the window's creation (before tabs have been added).
+  return contents ? contents->GetURL() : GURL();
+}
+
 string16 Browser::GetWindowTitleForCurrentTab() const {
   WebContents* contents = chrome::GetActiveWebContents(this);
   string16 title;
@@ -2094,6 +2120,25 @@
       }
     }
   }
+
+  // We need to register the app-icon pref.
+  std::string icon_pref(prefs::kBrowserWindowIcon);
+  icon_pref.append("_");
+  icon_pref.append(app_name);
+  prefs->RegisterFilePathPref(icon_pref.c_str(), FilePath(),
+			      PrefService::UNSYNCABLE_PREF);
+}
+
+void Browser::RegisterAppDesktopPrefs(const std::string& app_name, Profile* profile) {
+  // We need to register the window position pref.
+  std::string window_pref(prefs::kBrowserWindowPlacement);
+  window_pref.append("_");
+  window_pref.append(app_name);
+  PrefService* prefs = profile->GetPrefs();
+  if (!prefs->FindPreference(window_pref.c_str())) {
+    prefs->RegisterDictionaryPref(window_pref.c_str(),
+                                  PrefService::UNSYNCABLE_PREF);
+  }
 }
 
 ///////////////////////////////////////////////////////////////////////////////
Index: src/chrome/browser/ui/browser.h
===================================================================
--- src.orig/chrome/browser/ui/browser.h	2012-11-07 10:20:54.000000000 +0000
+++ src/chrome/browser/ui/browser.h	2012-11-13 10:37:44.179746710 +0000
@@ -205,6 +205,11 @@
   explicit Browser(const CreateParams& params);
   virtual ~Browser();
 
+  std::string GetWindowIconKey() const;
+
+  // Gets the URL of the current tab
+  GURL GetURLForCurrentTab() const;
+
   // Set overrides for the initial window bounds and maximized state.
   void set_override_bounds(const gfx::Rect& bounds) {
     override_bounds_ = bounds;
@@ -765,6 +770,8 @@
 
   void TabDetachedAtImpl(TabContents* contents, int index, DetachType type);
 
+  static void RegisterAppDesktopPrefs(const std::string& app_name, Profile* profile);
+
   // Shared code between Reload() and ReloadIgnoringCache().
   void ReloadInternal(WindowOpenDisposition disposition, bool ignore_cache);
 
Index: src/chrome/browser/ui/gtk/gtk_util.h
===================================================================
--- src.orig/chrome/browser/ui/gtk/gtk_util.h	2012-11-07 10:20:45.000000000 +0000
+++ src/chrome/browser/ui/gtk/gtk_util.h	2012-11-13 09:47:20.003860486 +0000
@@ -30,6 +30,10 @@
 
 namespace gtk_util {
 
+GdkPixbuf* GetPixbufFromIconID(const std::string& icon_id);
+GList* GetIconList();
+GList* ProductIconList();
+
 // Create a table of labeled controls, using proper spacing and alignment.
 // Arguments should be pairs of const char*, GtkWidget*, concluding with a
 // NULL.  The first argument is a vector in which to place all labels
Index: src/chrome/common/pref_names.cc
===================================================================
--- src.orig/chrome/common/pref_names.cc	2012-11-07 10:23:30.000000000 +0000
+++ src/chrome/common/pref_names.cc	2012-11-13 09:47:20.023860481 +0000
@@ -1249,6 +1249,9 @@
 // window to restore on startup.
 const char kBrowserWindowPlacement[] = "browser.window_placement";
 
+// Desktop Icon name
+const char kBrowserWindowIcon[] = "browser.window_icon";
+
 // A collection of position, size, and other data relating to the task
 // manager window to restore on startup.
 const char kTaskManagerWindowPlacement[] = "task_manager.window_placement";
Index: src/chrome/common/pref_names.h
===================================================================
--- src.orig/chrome/common/pref_names.h	2012-11-07 10:23:30.000000000 +0000
+++ src/chrome/common/pref_names.h	2012-11-13 09:47:20.031860484 +0000
@@ -440,6 +440,7 @@
 extern const char kUninstallLastLaunchTimeSec[];
 extern const char kUninstallLastObservedRunTimeSec[];
 
+extern const char kBrowserWindowIcon[];
 extern const char kBrowserWindowPlacement[];
 extern const char kTaskManagerWindowPlacement[];
 extern const char kKeywordEditorWindowPlacement[];
Index: src/chrome/common/chrome_switches.h
===================================================================
--- src.orig/chrome/common/chrome_switches.h	2012-11-07 10:23:30.000000000 +0000
+++ src/chrome/common/chrome_switches.h	2012-11-13 10:37:44.179746710 +0000
@@ -213,6 +213,7 @@
 extern const char kHostResolverRetryAttempts[];
 extern const char kHostResolverRules[];
 extern const char kHstsHosts[];
+extern const char kIconId[];
 extern const char kIgnoreGpuBlacklist[];
 extern const char kImport[];
 extern const char kImportFromFile[];
Index: src/chrome/browser/ui/gtk/browser_titlebar.cc
===================================================================
--- src.orig/chrome/browser/ui/gtk/browser_titlebar.cc	2012-11-07 10:20:45.000000000 +0000
+++ src/chrome/browser/ui/gtk/browser_titlebar.cc	2012-11-13 09:47:20.063860483 +0000
@@ -600,12 +600,25 @@
         // top left of the custom frame, that will get updated when the
         // throbber is updated.
         Profile* profile = browser_window_->browser()->profile();
-        gfx::Image icon = browser_window_->browser()->GetCurrentPageIcon();
-        if (icon.IsEmpty()) {
-          gtk_util::SetWindowIcon(window_, profile);
-        } else {
-          gtk_util::SetWindowIcon(window_, profile, icon.ToGdkPixbuf());
-        }
+
+	// If we got an icon-id parameter (saved into prefs) and the
+	// current URL is a subpath of the app parameter use the icon-id
+	// icon
+	std::string current_host = browser_window_->browser()->GetURLForCurrentTab().host();
+	GList* icon_list = NULL;
+	GdkPixbuf* icon_pixbuf = NULL;
+	std::string icon_pref_key = browser_window_->browser()->GetWindowIconKey();
+	PrefService* prefs = browser_window_->browser()->profile()->GetPrefs();
+	FilePath prefs_icon_id = prefs->GetFilePath(icon_pref_key.c_str());
+	if (!prefs_icon_id.empty())
+	  icon_pixbuf = gtk_util::GetPixbufFromIconID(prefs_icon_id.value());
+	if (icon_pixbuf) {
+	  icon_list = g_list_append(icon_list, icon_pixbuf);
+	} else {
+	  icon_list = gtk_util::GetIconList();
+	}
+	gtk_window_set_icon_list(window_, icon_list);
+	g_list_free(icon_list);
         break;
       }
       case Browser::TYPE_TABBED: {
@@ -632,6 +645,7 @@
 
     // Note: we want to exclude the application popup/panel window.
     if ((browser_window_->browser()->is_app() &&
+         browser_window_->browser()->is_type_popup() &&
         !browser_window_->browser()->is_type_tabbed())) {
       gfx::Image icon = browser_window_->browser()->GetCurrentPageIcon();
       if (icon.IsEmpty()) {
Index: src/chrome/browser/ui/extensions/application_launch.cc
===================================================================
--- src.orig/chrome/browser/ui/extensions/application_launch.cc	2012-11-07 10:20:44.000000000 +0000
+++ src/chrome/browser/ui/extensions/application_launch.cc	2012-11-13 10:37:44.179746710 +0000
@@ -20,6 +20,7 @@
 #include "chrome/browser/ui/browser_window.h"
 #include "chrome/browser/ui/tab_contents/tab_contents.h"
 #include "chrome/browser/ui/tabs/tab_strip_model.h"
+#include "chrome/browser/prefs/pref_service.h"
 #include "chrome/browser/web_applications/web_app.h"
 #include "chrome/common/chrome_switches.h"
 #include "chrome/common/extensions/extension.h"
@@ -68,6 +69,7 @@
     const Extension* extension,
     extension_misc::LaunchContainer container,
     const GURL& url_input,
+    const FilePath& icon_id,
     Browser** app_browser) {
   DCHECK(!url_input.is_empty() || extension);
   GURL url = UrlForExtension(extension, url_input);
@@ -109,6 +111,12 @@
   if (app_browser)
     *app_browser = browser;
 
+  // save icon-id value for later use by UpdateWindowIcon
+  if (!icon_id.empty()) {
+    std::string icon_pref_key = browser->GetWindowIconKey();
+    profile->GetPrefs()->SetFilePath(icon_pref_key.c_str(), icon_id);
+  }
+
   TabContents* tab_contents = chrome::AddSelectedTabWithURL(
       browser, url, content::PAGE_TRANSITION_START_PAGE);
   WebContents* contents = tab_contents->web_contents();
@@ -247,6 +255,8 @@
     return NULL;
   }
 
+  const FilePath::CharType kEmptyIcon[] = FILE_PATH_LITERAL("");
+  FilePath empty_icon(kEmptyIcon);
   switch (container) {
     case extension_misc::LAUNCH_NONE: {
       NOTREACHED();
@@ -255,7 +265,7 @@
     case extension_misc::LAUNCH_PANEL:
     case extension_misc::LAUNCH_WINDOW:
       tab = OpenApplicationWindow(profile, extension, container,
-                                  override_url, NULL);
+                                  override_url, empty_icon, NULL);
       break;
     case extension_misc::LAUNCH_TAB: {
       tab = OpenApplicationTab(profile, extension, override_url,
@@ -270,6 +280,7 @@
 }
 
 WebContents* OpenAppShortcutWindow(Profile* profile,
+				   const FilePath& icon_id,
                                    const GURL& url) {
   Browser* app_browser;
   WebContents* tab = OpenApplicationWindow(
@@ -277,6 +288,7 @@
       NULL,  // this is a URL app.  No extension.
       extension_misc::LAUNCH_WINDOW,
       url,
+      icon_id,
       &app_browser);
 
   if (!tab)
Index: src/chrome/browser/ui/extensions/application_launch.h
===================================================================
--- src.orig/chrome/browser/ui/extensions/application_launch.h	2012-11-07 10:20:44.000000000 +0000
+++ src/chrome/browser/ui/extensions/application_launch.h	2012-11-13 10:37:44.179746710 +0000
@@ -64,6 +64,7 @@
 // is used to open the former.  To open the latter, use
 // application_launch::OpenApplication().
 content::WebContents* OpenAppShortcutWindow(Profile* profile,
+					    const FilePath& icon_id,
                                             const GURL& url);
 
 }  // namespace application_launch
Index: src/chrome/browser/ui/startup/startup_browser_creator_impl.cc
===================================================================
--- src.orig/chrome/browser/ui/startup/startup_browser_creator_impl.cc	2012-11-07 10:20:51.000000000 +0000
+++ src/chrome/browser/ui/startup/startup_browser_creator_impl.cc	2012-11-13 10:37:44.179746710 +0000
@@ -515,8 +515,11 @@
             extension_misc::APP_LAUNCH_CMD_LINE_APP_LEGACY);
       }
 
+      std::string icon_id(command_line_.GetSwitchValueASCII(switches::kIconId);
+
       WebContents* app_tab = application_launch::OpenAppShortcutWindow(
           profile,
+	  FilePath(icon_id),
           url);
 
       if (out_app_contents)
Index: src/chrome/browser/ui/browser_ui_prefs.cc
===================================================================
--- src.orig/chrome/browser/ui/browser_ui_prefs.cc	2012-11-13 09:47:19.943860486 +0000
+++ src/chrome/browser/ui/browser_ui_prefs.cc	2012-11-13 10:38:43.779744465 +0000
@@ -2,6 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include "base/file_path.h"
+
 #include "chrome/browser/ui/browser_ui_prefs.h"
 
 #include "chrome/browser/prefs/pref_service.h"
@@ -168,7 +170,25 @@
     prefs->RegisterDictionaryPref(window_pref.c_str(),
                                   PrefService::UNSYNCABLE_PREF);
   }
+
+  // We need to register the app-icon pref.
+  std::string icon_pref(prefs::kBrowserWindowIcon);
+  icon_pref.append("_");
+  icon_pref.append(app_name);
+  prefs->RegisterFilePathPref(icon_pref.c_str(), FilePath(),
+			      PrefService::UNSYNCABLE_PREF);
 }
 
+void RegisterAppDesktopPrefs(const std::string& app_name, Profile* profile) {
+  // We need to register the window position pref.
+  std::string window_pref(prefs::kBrowserWindowPlacement);
+  window_pref.append("_");
+  window_pref.append(app_name);
+  PrefService* prefs = profile->GetPrefs();
+  if (!prefs->FindPreference(window_pref.c_str())) {
+    prefs->RegisterDictionaryPref(window_pref.c_str(),
+                                  PrefService::UNSYNCABLE_PREF);
+  }
+}
 
 }  // namespace chrome
Index: src/chrome/browser/ui/browser_ui_prefs.h
===================================================================
--- src.orig/chrome/browser/ui/browser_ui_prefs.h	2012-11-07 10:20:54.000000000 +0000
+++ src/chrome/browser/ui/browser_ui_prefs.h	2012-11-13 10:38:52.351744144 +0000
@@ -28,6 +28,8 @@
 // session / per user profile.
 void RegisterAppPrefs(const std::string& app_name, Profile* profile);
 
+void RegisterAppDesktopPrefs(const std::string& app_name, Profile* profile);
+
 }  // namespace chrome
 
 #endif  // CHROME_BROWSER_UI_BROWSER_UI_PREFS_H_
