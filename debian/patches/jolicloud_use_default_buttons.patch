--- src.orig/chrome/browser/gtk/gtk_theme_provider.cc	2010-09-21 16:38:14.419786697 +0200
+++ src/chrome/browser/gtk/gtk_theme_provider.cc	2010-09-21 16:39:30.089602693 +0200
@@ -275,6 +275,7 @@
 void GtkThemeProvider::Init(Profile* profile) {
   profile->GetPrefs()->AddPrefObserver(prefs::kUsesSystemTheme, this);
   use_gtk_ = profile->GetPrefs()->GetBoolean(prefs::kUsesSystemTheme);
+  use_gtk_buttons_ = false;
 
   BrowserThemeProvider::Init(profile);
 }
@@ -347,12 +348,13 @@
   if ((type == NotificationType::PREF_CHANGED) &&
       (*Details<std::wstring>(details).ptr() == prefs::kUsesSystemTheme))
     use_gtk_ = profile()->GetPrefs()->GetBoolean(prefs::kUsesSystemTheme);
+    use_gtk_buttons_ = false;
 }
 
 GtkWidget* GtkThemeProvider::BuildChromeButton() {
   GtkWidget* button = HoverControllerGtk::CreateChromeButton();
-  gtk_chrome_button_set_use_gtk_rendering(GTK_CHROME_BUTTON(button), use_gtk_);
+  gtk_chrome_button_set_use_gtk_rendering(GTK_CHROME_BUTTON(button), use_gtk_buttons_);
   chrome_buttons_.push_back(button);
 
   signals_->Connect(button, "destroy", G_CALLBACK(OnDestroyChromeButtonThunk),

@@ -377,6 +377,10 @@
   return use_gtk_;
 }
 
+bool GtkThemeProvider::UseGtkButtons() const {
+  return use_gtk_buttons_;
+}
+
 GdkColor GtkThemeProvider::GetGdkColor(int id) const {
   return gfx::SkColorToGdkColor(GetColor(id));
 }
@@ -599,7 +600,7 @@
   for (std::vector<GtkWidget*>::iterator it = chrome_buttons_.begin();
        it != chrome_buttons_.end(); ++it) {
     gtk_chrome_button_set_use_gtk_rendering(
-        GTK_CHROME_BUTTON(*it), use_gtk_);
+        GTK_CHROME_BUTTON(*it), use_gtk_buttons_);
   }
 }
 
--- src.orig/chrome/browser/gtk/gtk_theme_provider.h	2010-09-20 16:12:21.058771761 +0200
+++ src/chrome/browser/gtk/gtk_theme_provider.h		2010-09-20 16:13:06.554771082 +0200
@@ -68,8 +68,9 @@
   // FIXME
   GtkWidget* CreateToolbarSeparator();
 
-  // Whether we should use the GTK system theme.
+  // Whether we should use the GTK system theme and buttons.
   bool UseGtkTheme() const;
+  bool UseGtkButtons() const;
 
   // A wrapper around ThemeProvider::GetColor, transforming the result to a
   // GdkColor.
@@ -211,8 +211,9 @@
   CHROMEGTK_CALLBACK_1(GtkThemeProvider, gboolean, OnSeparatorExpose,
                        GdkEventExpose*);
 
-  // Whether we should be using gtk rendering.
+  // Whether we should be using gtk rendering and buttons
   bool use_gtk_;
+  bool use_gtk_buttons_;
 
   // GtkWidgets that exist only so we can look at their properties (and take
   // their colors).

--- src.orig/chrome/browser/gtk/custom_button.cc	2010-09-21 19:36:43.604158368 +0200
+++ src/chrome/browser/gtk/custom_button.cc		2010-09-21 19:40:31.388158362 +0200
@@ -343,5 +343,5 @@
 }
 
 bool CustomDrawButton::UseGtkTheme() {
-  return theme_provider_ && theme_provider_->UseGtkTheme();
+  return theme_provider_ && theme_provider_->UseGtkButtons();
 }
--- src.orig/chrome/browser/gtk/reload_button_gtk.cc	2010-09-21 19:46:16.944158357 +0200
+++ src/chrome/browser/gtk/reload_button_gtk.cc		2010-09-21 19:47:02.080116259 +0200
@@ -100,7 +100,7 @@
 
 gboolean ReloadButtonGtk::OnExpose(GtkWidget* widget,
                                    GdkEventExpose* e) {
-  if (theme_provider_ && theme_provider_->UseGtkTheme())
+  if (theme_provider_ && theme_provider_->UseGtkButtons())
     return FALSE;
   return ((visible_mode_ == MODE_RELOAD) ? reload_ : stop_).OnExpose(
       widget, e, hover_controller_.GetCurrentValue());
@@ -183,9 +183,9 @@
 }
 
 void ReloadButtonGtk::UpdateThemeButtons() {
-  bool use_gtk = theme_provider_ && theme_provider_->UseGtkTheme();
+  bool use_gtk_buttons = theme_provider_ && theme_provider_->UseGtkButtons();
 
-  if (use_gtk) {
+  if (use_gtk_buttons) {
     GdkPixbuf* pixbuf = gtk_widget_render_icon(widget(),
         (intended_mode_ == MODE_RELOAD) ? GTK_STOCK_REFRESH : GTK_STOCK_STOP,
         GTK_ICON_SIZE_SMALL_TOOLBAR, NULL);
@@ -214,5 +214,5 @@
   }
 
   gtk_chrome_button_set_use_gtk_rendering(
-      GTK_CHROME_BUTTON(widget_.get()), use_gtk);
+      GTK_CHROME_BUTTON(widget_.get()), use_gtk_buttons);
 }


