Index: src/chrome/browser/ui/gtk/custom_button.cc
===================================================================
--- src.orig/chrome/browser/ui/gtk/custom_button.cc	2013-03-08 19:01:55.000000000 +0100
+++ src/chrome/browser/ui/gtk/custom_button.cc	2013-03-25 15:14:55.403855584 +0100
@@ -383,5 +383,5 @@
 
 bool CustomDrawButton::UseGtkTheme() {
   return !forcing_chrome_theme_ && theme_service_ &&
-      theme_service_->UsingNativeTheme();
+      theme_service_->UseGtkButtons();
 }
Index: src/chrome/browser/ui/gtk/reload_button_gtk.cc
===================================================================
--- src.orig/chrome/browser/ui/gtk/reload_button_gtk.cc	2013-03-08 19:01:55.000000000 +0100
+++ src/chrome/browser/ui/gtk/reload_button_gtk.cc	2013-03-25 15:14:55.403855584 +0100
@@ -270,7 +270,7 @@
 gboolean ReloadButtonGtk::OnExpose(GtkWidget* widget,
                                    GdkEventExpose* e) {
   TRACE_EVENT0("ui::gtk", "ReloadButtonGtk::OnExpose");
-  if (theme_service_ && theme_service_->UsingNativeTheme())
+  if (theme_service_ && theme_service_->UseGtkButtons())
     return FALSE;
   return ((visible_mode_ == MODE_RELOAD) ? reload_ : stop_).OnExpose(
       widget, e, hover_controller_.GetCurrentValue());
@@ -341,9 +341,9 @@
 }
 
 void ReloadButtonGtk::UpdateThemeButtons() {
-  bool use_gtk = theme_service_ && theme_service_->UsingNativeTheme();
+  bool use_gtk_buttons = theme_service_ && theme_service_->UseGtkButtons();
 
-  if (use_gtk) {
+  if (use_gtk_buttons) {
     gtk_widget_ensure_style(widget());
     GtkStyle* style = gtk_widget_get_style(widget());
     GtkIconSet* icon_set = gtk_style_lookup_icon_set(
@@ -386,7 +386,7 @@
     gtk_widget_set_double_buffered(widget(), FALSE);
   }
 
-  gtk_chrome_button_set_use_gtk_rendering(GTK_CHROME_BUTTON(widget()), use_gtk);
+  gtk_chrome_button_set_use_gtk_rendering(GTK_CHROME_BUTTON(widget()), use_gtk_buttons);
 }
 
 void ReloadButtonGtk::OnDoubleClickTimer() {
Index: src/chrome/browser/ui/gtk/gtk_theme_service.cc
===================================================================
--- src.orig/chrome/browser/ui/gtk/gtk_theme_service.cc	2013-03-08 19:01:58.000000000 +0100
+++ src/chrome/browser/ui/gtk/gtk_theme_service.cc	2013-03-25 15:21:01.087872288 +0100
@@ -295,6 +295,7 @@
                  base::Bind(&GtkThemeService::OnUsesSystemThemeChanged,
                             base::Unretained(this)));
   use_gtk_ = profile->GetPrefs()->GetBoolean(prefs::kUsesSystemTheme);
+  use_gtk_buttons_ = false;
   ThemeService::Init(profile);
 }
 
@@ -371,7 +372,7 @@
 
 GtkWidget* GtkThemeService::BuildChromeButton() {
   GtkWidget* button = HoverControllerGtk::CreateChromeButton();
-  gtk_chrome_button_set_use_gtk_rendering(GTK_CHROME_BUTTON(button), use_gtk_);
+  gtk_chrome_button_set_use_gtk_rendering(GTK_CHROME_BUTTON(button), use_gtk_buttons_);
   chrome_buttons_.push_back(button);
 
   signals_->Connect(button, "destroy", G_CALLBACK(OnDestroyChromeButtonThunk),
@@ -416,6 +417,10 @@
   return alignment;
 }
 
+bool GtkThemeService::UseGtkButtons() const {
+  return use_gtk_buttons_;
+}
+
 GdkColor GtkThemeService::GetGdkColor(int id) const {
   return gfx::SkColorToGdkColor(GetColor(id));
 }
@@ -637,7 +642,7 @@
   for (std::vector<GtkWidget*>::iterator it = chrome_buttons_.begin();
        it != chrome_buttons_.end(); ++it) {
     gtk_chrome_button_set_use_gtk_rendering(
-        GTK_CHROME_BUTTON(*it), use_gtk_);
+        GTK_CHROME_BUTTON(*it), use_gtk_buttons_);
   }
 
   for (std::vector<GtkWidget*>::iterator it = link_buttons_.begin();
@@ -1149,4 +1154,5 @@
 
 void GtkThemeService::OnUsesSystemThemeChanged() {
   use_gtk_ = profile()->GetPrefs()->GetBoolean(prefs::kUsesSystemTheme);
+  use_gtk_buttons_ = false;
 }
Index: src/chrome/browser/ui/gtk/gtk_theme_service.h
===================================================================
--- src.orig/chrome/browser/ui/gtk/gtk_theme_service.h	2013-03-08 19:02:00.000000000 +0100
+++ src/chrome/browser/ui/gtk/gtk_theme_service.h	2013-03-25 15:14:55.403855584 +0100
@@ -97,6 +97,9 @@
   // Creates a theme-aware vertical separator widget.
   GtkWidget* CreateToolbarSeparator();
 
+  // Whether we should use the GTK system buttons.
+  bool UseGtkButtons() const;
+
   // A wrapper around ui::ThemeProvider::GetColor, transforming the result to a
   // GdkColor.
   GdkColor GetGdkColor(int id) const;
@@ -246,6 +249,7 @@
 
   // Whether we should be using gtk rendering.
   bool use_gtk_;
+  bool use_gtk_buttons_;
 
   // GtkWidgets that exist only so we can look at their properties (and take
   // their colors).
