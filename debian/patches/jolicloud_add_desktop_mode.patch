--- a/chrome/browser/ui/browser.cc
+++ b/chrome/browser/ui/browser.cc
@@ -272,6 +272,7 @@
       block_command_execution_(false),
       last_blocked_command_id_(-1),
       last_blocked_command_disposition_(CURRENT_TAB),
+      kill_signal_(0),
       pending_web_app_action_(NONE),
       ALLOW_THIS_IN_INITIALIZER_LIST(
           tab_restore_service_delegate_(
@@ -478,6 +479,14 @@
 }
 
 // static
+Browser* Browser::CreateForAppDesktop(const std::string& app_name,
+                                      Profile* profile) {
+  CreateParams params(TYPE_DESKTOP, profile);
+  params.app_name = app_name;
+  return CreateWithParams(params);
+}
+
+// static
 Browser* Browser::CreateForDevTools(Profile* profile) {
 #if defined(OS_CHROMEOS)
   CreateParams params(TYPE_TABBED, profile);
@@ -624,7 +633,7 @@
     case extension_misc::LAUNCH_WINDOW:
     case extension_misc::LAUNCH_PANEL:
       tab = Browser::OpenApplicationWindow(profile, extension, container,
-                                           GURL(), empty_icon, NULL);
+                                           GURL(), empty_icon, false, NULL);
       break;
     case extension_misc::LAUNCH_TAB: {
       tab = Browser::OpenApplicationTab(profile, extension, disposition);
@@ -644,6 +653,7 @@
     extension_misc::LaunchContainer container,
     const GURL& url_input,
     const FilePath& icon_id,
+    bool as_desktop,
     Browser** app_browser) {
   GURL url;
   if (!url_input.is_empty()) {
@@ -671,8 +681,12 @@
     window_bounds.set_height(extension->launch_height());
   }
 
-  Browser* browser = Browser::CreateForApp(type, app_name, window_bounds,
-                                           profile);
+
+  Browser* browser;
+  if (as_desktop)
+    browser = Browser::CreateForAppDesktop(app_name, profile);
+  else
+    browser = Browser::CreateForApp(type, app_name, window_bounds, profile);
 
   if (app_browser)
     *app_browser = browser;
@@ -683,6 +697,9 @@
       profile->GetPrefs()->SetFilePath(icon_pref_key.c_str(), icon_id);
   }
 
+  if (as_desktop)
+    browser->window()->SetDesktop();
+
   TabContentsWrapper* wrapper =
       browser->AddSelectedTabWithURL(url, PageTransition::START_PAGE);
   TabContents* contents = wrapper->tab_contents();
@@ -699,6 +716,7 @@
 TabContents* Browser::OpenAppShortcutWindow(Profile* profile,
                                             const GURL& url,
                                             const FilePath& icon_id,
+                                            bool as_desktop,
                                             bool update_shortcut) {
   Browser* app_browser;
   TabContents* tab = OpenApplicationWindow(
@@ -707,6 +725,7 @@
       extension_misc::LAUNCH_WINDOW,
       url,
       icon_id,
+      as_desktop,
       &app_browser);
 
   if (!tab)
@@ -900,6 +919,9 @@
     case TYPE_PANEL:
       // Do not save the window placement of panels.
       return false;
+    case TYPE_DESKTOP:
+      // Do not save the window placement of desktop.
+      return false;
     default:
       return false;
   }
@@ -1019,7 +1041,9 @@
 }
 
 bool Browser::ShouldCloseWindow() {
-  if (!CanCloseWithInProgressDownloads())
+  if (!CanCloseWithInProgressDownloads()
+    || (is_type_desktop() && !kill_signal_)
+  )
     return false;
 
   if (HasCompletedUnloadProcessing())
@@ -1436,6 +1460,14 @@
 
     if (!is_app())
       features |= FEATURE_LOCATIONBAR;
+
+    if (is_type_desktop()) {
+      features &= ~FEATURE_BOOKMARKBAR;
+      features &= ~FEATURE_TITLEBAR;
+      features &= ~FEATURE_TABSTRIP;
+      features &= ~FEATURE_TOOLBAR;
+      features &= ~FEATURE_LOCATIONBAR;
+    }
   }
   return !!(features & feature);
 }
@@ -3159,7 +3191,7 @@
     indices->clear();
     can_close_all = false;
   }
-  return can_close_all;
+  return !(is_type_desktop() && !kill_signal_) && can_close_all;
 }
 
 bool Browser::CanBookmarkAllTabs() const {
@@ -3663,6 +3695,10 @@
     return;
   }
 
+  if (is_type_desktop() && !this->kill_signal_) {
+    proceed = false;
+  }
+
   if (!proceed) {
     CancelWindowClose();
     *proceed_to_fire_unload = false;
--- a/chrome/browser/ui/browser.h
+++ b/chrome/browser/ui/browser.h
@@ -91,6 +91,7 @@
     TYPE_TABBED = 1,
     TYPE_POPUP = 2,
     TYPE_PANEL = 3,
+    TYPE_DESKTOP = 4,
   };
 
   // Possible elements of the Browser window.
@@ -154,6 +155,10 @@
                                const gfx::Rect& window_bounds,
                                Profile* profile);
 
+  // Like Create, but creates a tabstrip-less and toolbar-less "app" window for
+  // the specified app, as the user's desktop.
+  static Browser* CreateForAppDesktop(const std::string& app_name, Profile* profile);
+
   // Like Create, but creates a tabstrip-less and toolbar-less
   // DevTools "app" window.
   static Browser* CreateForDevTools(Profile* profile);
@@ -263,6 +268,7 @@
       extension_misc::LaunchContainer container,
       const GURL& url,
       const FilePath& icon_id,
+      bool as_desktop,
       Browser** app_browser);
 
   // Open |url| in an app shortcut window.  If |update_shortcut| is true,
@@ -274,6 +280,7 @@
   static TabContents* OpenAppShortcutWindow(Profile* profile,
                                             const GURL& url,
                                             const FilePath& icon_id,
+                                            bool as_desktop,
                                             bool update_shortcut);
 
   // Open an application for |extension| using |disposition|.  Returns NULL if
@@ -841,6 +848,7 @@
   bool is_type_tabbed() const { return type_ == TYPE_TABBED; }
   bool is_type_popup() const { return type_ == TYPE_POPUP; }
   bool is_type_panel() const { return type_ == TYPE_PANEL; }
+  bool is_type_desktop() const { return type_ == TYPE_DESKTOP; }
 
   bool is_app() const;
   bool is_devtools() const;
@@ -1399,6 +1407,9 @@
   // Stores the disposition type of the last blocked command.
   WindowOpenDisposition last_blocked_command_disposition_;
 
+  // Stores the kill signal used to shutdown the browser.
+  int kill_signal_;
+
   // Different types of action when web app info is available.
   // OnDidGetApplicationInfo uses this to dispatch calls.
   enum WebAppAction {
--- a/chrome/browser/ui/browser_init.cc
+++ b/chrome/browser/ui/browser_init.cc
@@ -711,7 +711,8 @@
 
     if (process_startup) {
       if (browser_defaults::kOSSupportsOtherBrowsers &&
-          !command_line_.HasSwitch(switches::kNoDefaultBrowserCheck)) {
+          !command_line_.HasSwitch(switches::kNoDefaultBrowserCheck) &&
+          !IsDesktopLaunch()) {
         // Check whether we are the default browser.
         CheckDefaultBrowser(profile);
       }
@@ -795,6 +796,13 @@
   return (app_tab != NULL);
 }
 
+bool BrowserInit::LaunchWithProfile::IsDesktopLaunch() {
+  if (command_line_.HasSwitch(switches::kDesktop)) {
+    return true;
+  }
+  return false;
+}
+
 bool BrowserInit::LaunchWithProfile::OpenApplicationWindow(Profile* profile) {
   std::string url_string, app_id;
   if (!IsAppLaunch(&url_string, &app_id))
@@ -851,6 +859,7 @@
           profile,
           url,
           FilePath(icon_id),
+          IsDesktopLaunch(),
           true);  // Update app info.
       return (app_tab != NULL);
     }
--- a/chrome/browser/ui/browser_init.h
+++ b/chrome/browser/ui/browser_init.h
@@ -135,6 +135,9 @@
     // In this case |app_url| or |app_id| are populated if they're non-null.
     bool IsAppLaunch(std::string* app_url, std::string* app_id);
 
+    // If the process was launched with the desktop flag, return true.
+    bool IsDesktopLaunch();
+
     // If IsAppLaunch is true, tries to open an application window.
     // If the app is specified to start in a tab, or IsAppLaunch is false,
     // returns false to specify default processing.
--- a/chrome/browser/ui/gtk/browser_window_gtk.cc
+++ b/chrome/browser/ui/gtk/browser_window_gtk.cc
@@ -878,6 +878,42 @@
   return fullscreen_exit_bubble_.get() ? true : false;
 }
 
+void BrowserWindowGtk::ResizeToDesktopSize() {
+  GdkScreen* gdkScreen = gtk_window_get_screen(window_);
+  GdkRectangle rect;
+
+  gdk_screen_get_monitor_geometry(gdkScreen, 0, &rect);
+
+  // Decrease the desktop size by the size of the gnome-panel.
+  // FIXME: Figure this out properly!
+  rect.y = 24;
+  rect.height -= rect.y;
+
+  gtk_window_move( window_, rect.x, rect.y );
+  gtk_window_resize( window_, rect.width, rect.height );
+}
+
+gboolean OnVisibilityNotify(GtkWindow* window, GdkEventVisibility* event,
+                             BrowserWindowGtk* browser_win) {
+  /* If we are a desktop window, this expose event may have been
+     triggered by a change in the screen dimensions, so resize.
+  */
+  if (window == browser_win->window() && gtk_window_get_type_hint(window) == GDK_WINDOW_TYPE_HINT_DESKTOP) {
+    browser_win->ResizeToDesktopSize();
+    return TRUE;
+  }
+  return FALSE;
+}
+
+void BrowserWindowGtk::SetDesktop() {
+  ResizeToDesktopSize();
+  gtk_window_activate_focus( window_ );
+  gtk_window_set_type_hint( window_, GDK_WINDOW_TYPE_HINT_DESKTOP );
+  gtk_window_set_skip_taskbar_hint( window_, FALSE );
+  gtk_window_set_skip_pager_hint( window_, FALSE );
+  g_signal_connect(G_OBJECT(window_), "visibility-notify-event", G_CALLBACK(OnVisibilityNotify), this);
+}
+
 LocationBar* BrowserWindowGtk::GetLocationBar() const {
   return toolbar_->GetLocationBar();
 }
@@ -1906,6 +1942,12 @@
 
   if (browser_->ShouldSaveWindowPlacement())
     browser_->SaveWindowPlacement(restored_bounds_, show_state);
+  else {
+    // Do not continue with SaveWindowPosition() if the previous
+    // ShouldSaveWindowPlacement() returns false, such is the case when
+    // running in desktop mode: window preference settings will crash <!>
+    return;
+  }
 
   // We also need to save the placement for startup.
   // This is a web of calls between views and delegates on Windows, but the
--- a/ui/base/x/x11_util.cc
+++ b/ui/base/x/x11_util.cc
@@ -361,6 +361,36 @@
   return true;
 }
 
+bool ChangeProperty(
+    XID window, const std::string& property_name, const std::string& set_name) {
+  Atom property_atom = gdk_x11_get_xatom_by_name_for_display(
+      gdk_display_get_default(), property_name.c_str());
+  Atom set_atom = gdk_x11_get_xatom_by_name_for_display(
+      gdk_display_get_default(), set_name.c_str());
+  Atom type = XA_ATOM;
+  int format = 32;
+  int mode = PropModeReplace;
+  long unsigned int num_items = 1;
+
+  LOG(INFO) << "Setting X desktop mode hint";
+
+  int result = XChangeProperty( GDK_DISPLAY_XDISPLAY( gdk_display_get_default() ),
+                                window,
+                                property_atom,
+                                type,
+                                format,
+                                mode,
+                                (guchar*) &set_atom,
+                                num_items);
+
+  LOG(INFO) << "XChangeProperty returned: " << result;
+
+  if (result != Success)
+    return false;
+
+  return true;
+}
+
 XID GetParentWindow(XID window) {
   XID root = None;
   XID parent = None;
--- a/ui/base/x/x11_util.h
+++ b/ui/base/x/x11_util.h
@@ -108,6 +108,8 @@
                                     std::vector<Atom>* value);
 UI_EXPORT bool GetStringProperty(
     XID window, const std::string& property_name, std::string* value);
+bool ChangeProperty(
+    XID window, const std::string& property_name, const std::string& set_name);
 
 // Get |window|'s parent window, or None if |window| is the root window.
 XID GetParentWindow(XID window);
--- a/chrome/browser/ui/browser_window.h
+++ b/chrome/browser/ui/browser_window.h
@@ -141,6 +141,9 @@
   // Returns true if the fullscreen bubble is visible.
   virtual bool IsFullscreenBubbleVisible() const = 0;
 
+  // Sets the desktop-mode state
+  virtual void SetDesktop() = 0;
+
   // Returns the location bar.
   virtual LocationBar* GetLocationBar() const = 0;
 
--- a/chrome/browser/ui/gtk/browser_window_gtk.h
+++ b/chrome/browser/ui/gtk/browser_window_gtk.h
@@ -81,6 +81,8 @@
   virtual void SetFullscreen(bool fullscreen);
   virtual bool IsFullscreen() const;
   virtual bool IsFullscreenBubbleVisible() const;
+  void ResizeToDesktopSize();
+  virtual void SetDesktop();
   virtual LocationBar* GetLocationBar() const;
   virtual void SetFocusToLocationBar(bool select_all);
   virtual void UpdateReloadStopState(bool is_loading, bool force);
--- a/chrome/common/chrome_switches.cc
+++ b/chrome/common/chrome_switches.cc
@@ -196,6 +196,9 @@
 // device management backend.
 const char kDeviceManagementUrl[]           = "device-management-url";
 
+// Specifies that the browser should be launched in "X Desktop" mode.
+const char kDesktop[]                       = "desktop";
+
 // Triggers a pletora of diagnostic modes.
 const char kDiagnostics[]                   = "diagnostics";
 
--- a/chrome/common/chrome_switches.h
+++ b/chrome/common/chrome_switches.h
@@ -65,6 +65,7 @@
 extern const char kDebugDevToolsFrontend[];
 extern const char kDebugEnableFrameToggle[];
 extern const char kDebugPrint[];
+extern const char kDesktop[];
 extern const char kDeviceManagementUrl[];
 extern const char kDiagnostics[];
 extern const char kDisableAuthNegotiateCnameLookup[];
--- a/chrome/browser/ui/panels/panel.cc
+++ b/chrome/browser/ui/panels/panel.cc
@@ -218,6 +218,10 @@
   return false;
 }
 
+void Panel::SetDesktop() {
+  NOTIMPLEMENTED();
+}
+
 LocationBar* Panel::GetLocationBar() const {
   NOTIMPLEMENTED();
   return NULL;
--- a/chrome/browser/ui/panels/panel.h
+++ b/chrome/browser/ui/panels/panel.h
@@ -80,6 +80,7 @@
   virtual void SetFullscreen(bool fullscreen) OVERRIDE;
   virtual bool IsFullscreen() const OVERRIDE;
   virtual bool IsFullscreenBubbleVisible() const OVERRIDE;
+  virtual void SetDesktop() OVERRIDE;
   virtual LocationBar* GetLocationBar() const OVERRIDE;
   virtual void SetFocusToLocationBar(bool select_all) OVERRIDE;
   virtual void UpdateReloadStopState(bool is_loading, bool force) OVERRIDE;
--- a/chrome/browser/ui/cocoa/browser_window_cocoa.h
+++ b/chrome/browser/ui/cocoa/browser_window_cocoa.h
@@ -57,6 +57,7 @@
   virtual void SetFullscreen(bool fullscreen);
   virtual bool IsFullscreen() const;
   virtual bool IsFullscreenBubbleVisible() const;
+  virtual void SetDesktop();
   virtual LocationBar* GetLocationBar() const;
   virtual void SetFocusToLocationBar(bool select_all);
   virtual void UpdateReloadStopState(bool is_loading, bool force);
--- a/chrome/browser/ui/cocoa/browser_window_cocoa.mm
+++ b/chrome/browser/ui/cocoa/browser_window_cocoa.mm
@@ -262,6 +262,10 @@
   return false;
 }
 
+void BrowserWindowCocoa::SetDesktop() {
+  NOTIMPLEMENTED();
+}
+
 void BrowserWindowCocoa::ConfirmAddSearchProvider(
     const TemplateURL* template_url,
     Profile* profile) {
--- a/chrome/browser/ui/panels/panel_browser_window_cocoa.h
+++ b/chrome/browser/ui/panels/panel_browser_window_cocoa.h
@@ -52,6 +52,7 @@
       const NativeWebKeyboardEvent& event) OVERRIDE;
   virtual Browser* GetPanelBrowser() const OVERRIDE;
   virtual void DestroyPanelBrowser() OVERRIDE;
+  virtual void SetDesktop() OVERRIDE;
   virtual gfx::Size GetNonClientAreaExtent() const OVERRIDE;
   virtual int GetRestoredHeight() const OVERRIDE;
   virtual void SetRestoredHeight(int height) OVERRIDE;
--- a/chrome/browser/ui/panels/panel_browser_window_cocoa.mm
+++ /dev/null
@@ -1,220 +0,0 @@
-// Copyright (c) 2011 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "chrome/browser/ui/panels/panel_browser_window_cocoa.h"
-
-#include "base/logging.h"
-#include "chrome/browser/ui/browser.h"
-#include "chrome/browser/ui/cocoa/find_bar/find_bar_bridge.h"
-#import "chrome/browser/ui/cocoa/browser_window_utils.h"
-#include "chrome/browser/ui/panels/panel.h"
-#include "chrome/browser/ui/panels/panel_manager.h"
-#import "chrome/browser/ui/panels/panel_window_controller_cocoa.h"
-#include "content/common/native_web_keyboard_event.h"
-
-namespace {
-
-// Use this instead of 0 for minimum size of a window when doing opening and
-// closing animations, since OSX window manager does not like 0-sized windows
-// (according to avi@).
-const int kMinimumWindowSize = 1;
-
-// TODO(dcheng): Move elsewhere so BrowserWindowCocoa can use them too.
-NSRect ConvertCoordinatesToCocoa(const gfx::Rect& bounds) {
-  // Flip coordinates based on the primary screen.
-  NSScreen* screen = [[NSScreen screens] objectAtIndex:0];
-
-  return NSMakeRect(
-      bounds.x(), NSHeight([screen frame]) - bounds.height() - bounds.y(),
-      bounds.width(), bounds.height());
-}
-
-}  // namespace
-
-// This creates a shim window class, which in turn creates a Cocoa window
-// controller which in turn creates actual NSWindow by loading a nib.
-// Overall chain of ownership is:
-// PanelWindowControllerCocoa -> PanelBrowserWindowCocoa -> Panel.
-NativePanel* Panel::CreateNativePanel(Browser* browser, Panel* panel,
-                                      const gfx::Rect& bounds) {
-  return new PanelBrowserWindowCocoa(browser, panel, bounds);
-}
-
-PanelBrowserWindowCocoa::PanelBrowserWindowCocoa(Browser* browser,
-                                                 Panel* panel,
-                                                 const gfx::Rect& bounds)
-  : browser_(browser),
-    panel_(panel),
-    bounds_(bounds),
-    is_shown_(false),
-    has_find_bar_(false) {
-  controller_ = [[PanelWindowControllerCocoa alloc] initWithBrowserWindow:this];
-}
-
-PanelBrowserWindowCocoa::~PanelBrowserWindowCocoa() {
-}
-
-bool PanelBrowserWindowCocoa::isClosed() {
-  return !controller_;
-}
-
-void PanelBrowserWindowCocoa::ShowPanel() {
-  if (isClosed())
-    return;
-
-  // Browser calls this several times, meaning 'ensure it's shown'.
-  // Animations don't look good when repeated - hence this flag is needed.
-  if (is_shown_) {
-    return;
-  }
-  is_shown_ = true;
-
-  NSRect finalFrame = ConvertCoordinatesToCocoa(GetPanelBounds());
-  [controller_ revealAnimatedWithFrame:finalFrame];
-}
-
-void PanelBrowserWindowCocoa::ShowPanelInactive() {
-  // TODO(dimich): to be implemented.
-  ShowPanel();
-}
-
-gfx::Rect PanelBrowserWindowCocoa::GetPanelBounds() const {
-  return bounds_;
-}
-
-void PanelBrowserWindowCocoa::SetPanelBounds(const gfx::Rect& bounds) {
-  bounds_ = bounds;
-  NSRect frame = ConvertCoordinatesToCocoa(bounds);
-  [[controller_ window] setFrame:frame display:YES animate:YES];
-}
-
-void PanelBrowserWindowCocoa::OnPanelExpansionStateChanged(
-    Panel::ExpansionState expansion_state) {
-  NOTIMPLEMENTED();
-}
-
-bool PanelBrowserWindowCocoa::ShouldBringUpPanelTitlebar(int mouse_x,
-                                                         int mouse_y) const {
-  NOTIMPLEMENTED();
-  return false;
-}
-
-void PanelBrowserWindowCocoa::ClosePanel() {
-  if (isClosed())
-      return;
-
-  NSWindow* window = [controller_ window];
-  [window performClose:controller_];
-}
-
-void PanelBrowserWindowCocoa::ActivatePanel() {
-  NOTIMPLEMENTED();
-}
-
-void PanelBrowserWindowCocoa::DeactivatePanel() {
-  NOTIMPLEMENTED();
-}
-
-bool PanelBrowserWindowCocoa::IsPanelActive() const {
-  NOTIMPLEMENTED();
-  return false;
-}
-
-gfx::NativeWindow PanelBrowserWindowCocoa::GetNativePanelHandle() {
-  return [controller_ window];
-}
-
-void PanelBrowserWindowCocoa::UpdatePanelTitleBar() {
-  if (!is_shown_)
-    return;
-  [controller_ updateTitleBar];
-}
-
-void PanelBrowserWindowCocoa::ShowTaskManagerForPanel() {
-  NOTIMPLEMENTED();
-}
-
-FindBar* PanelBrowserWindowCocoa::CreatePanelFindBar() {
-  DCHECK(!has_find_bar_) << "find bar should only be created once";
-  has_find_bar_ = true;
-
-  FindBarBridge* bridge = new FindBarBridge();
-  [controller_ addFindBar:bridge->find_bar_cocoa_controller()];
-  return bridge;
-}
-
-void PanelBrowserWindowCocoa::NotifyPanelOnUserChangedTheme() {
-  NOTIMPLEMENTED();
-}
-
-void PanelBrowserWindowCocoa::DrawAttention() {
-  NOTIMPLEMENTED();
-}
-
-bool PanelBrowserWindowCocoa::IsDrawingAttention() const {
-  NOTIMPLEMENTED();
-  return false;
-}
-
-bool PanelBrowserWindowCocoa::PreHandlePanelKeyboardEvent(
-    const NativeWebKeyboardEvent& event, bool* is_keyboard_shortcut) {
-  if (![BrowserWindowUtils shouldHandleKeyboardEvent:event])
-    return false;
-
-  int id = [BrowserWindowUtils getCommandId:event];
-  if (id == -1)
-    return false;
-
-  if (browser()->IsReservedCommandOrKey(id, event)) {
-      return [BrowserWindowUtils handleKeyboardEvent:event.os_event
-                                 inWindow:GetNativePanelHandle()];
-  }
-
-  DCHECK(is_keyboard_shortcut);
-  *is_keyboard_shortcut = true;
-  return false;
-}
-
-void PanelBrowserWindowCocoa::HandlePanelKeyboardEvent(
-    const NativeWebKeyboardEvent& event) {
-  if ([BrowserWindowUtils shouldHandleKeyboardEvent:event]) {
-    [BrowserWindowUtils handleKeyboardEvent:event.os_event
-                                   inWindow:GetNativePanelHandle()];
-  }
-}
-
-Browser* PanelBrowserWindowCocoa::GetPanelBrowser() const {
-  return browser();
-}
-
-void PanelBrowserWindowCocoa::DestroyPanelBrowser() {
-  [controller_ close];
-}
-
-void PanelBrowserWindowCocoa::didCloseNativeWindow() {
-  DCHECK(!isClosed());
-  panel_->manager()->Remove(panel_.get());
-  controller_ = NULL;
-}
-gfx::Size PanelBrowserWindowCocoa::GetNonClientAreaExtent() const {
-  NOTIMPLEMENTED();
-  return gfx::Size();
-}
-
-int PanelBrowserWindowCocoa::GetRestoredHeight() const {
-  NOTIMPLEMENTED();
-  return 0;
-}
-
-void PanelBrowserWindowCocoa::SetRestoredHeight(int height) {
-  NOTIMPLEMENTED();
-}
-
-// NativePanelTesting implementation.
-
-// static
-NativePanelTesting* NativePanelTesting::Create(NativePanel* native_panel) {
-  NOTIMPLEMENTED();
-  return NULL;
-}
