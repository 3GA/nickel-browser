Index: src/chrome/browser/ui/gtk/gtk_theme_provider.cc
===================================================================
--- src.orig/chrome/browser/ui/gtk/gtk_theme_provider.cc	2010-09-30 20:04:24.000000000 +0200
+++ src/chrome/browser/ui/gtk/gtk_theme_provider.cc	2010-10-11 13:39:07.172390860 +0200
@@ -275,6 +275,7 @@
 void GtkThemeProvider::Init(Profile* profile) {
   profile->GetPrefs()->AddPrefObserver(prefs::kUsesSystemTheme, this);
   use_gtk_ = profile->GetPrefs()->GetBoolean(prefs::kUsesSystemTheme);
+  use_gtk_buttons_ = false;
 
   BrowserThemeProvider::Init(profile);
 }
@@ -347,11 +348,12 @@
   if ((type == NotificationType::PREF_CHANGED) &&
       (*Details<std::string>(details).ptr() == prefs::kUsesSystemTheme))
     use_gtk_ = profile()->GetPrefs()->GetBoolean(prefs::kUsesSystemTheme);
+    use_gtk_buttons_ = false;
 }
 
 GtkWidget* GtkThemeProvider::BuildChromeButton() {
   GtkWidget* button = HoverControllerGtk::CreateChromeButton();
-  gtk_chrome_button_set_use_gtk_rendering(GTK_CHROME_BUTTON(button), use_gtk_);
+  gtk_chrome_button_set_use_gtk_rendering(GTK_CHROME_BUTTON(button), use_gtk_buttons_);
   chrome_buttons_.push_back(button);
 
   signals_->Connect(button, "destroy", G_CALLBACK(OnDestroyChromeButtonThunk),
@@ -375,6 +377,10 @@
   return use_gtk_;
 }
 
+bool GtkThemeProvider::UseGtkButtons() const {
+  return use_gtk_buttons_;
+}
+
 GdkColor GtkThemeProvider::GetGdkColor(int id) const {
   return gfx::SkColorToGdkColor(GetColor(id));
 }
@@ -586,7 +592,7 @@
   for (std::vector<GtkWidget*>::iterator it = chrome_buttons_.begin();
        it != chrome_buttons_.end(); ++it) {
     gtk_chrome_button_set_use_gtk_rendering(
-        GTK_CHROME_BUTTON(*it), use_gtk_);
+        GTK_CHROME_BUTTON(*it), use_gtk_buttons_);
   }
 }
 
Index: src/chrome/browser/ui/gtk/gtk_theme_provider.h
===================================================================
--- src.orig/chrome/browser/ui/gtk/gtk_theme_provider.h	2010-09-30 20:04:24.000000000 +0200
+++ src/chrome/browser/ui/gtk/gtk_theme_provider.h	2010-10-11 13:37:04.552393580 +0200
@@ -68,8 +68,9 @@
   // FIXME
   GtkWidget* CreateToolbarSeparator();
 
-  // Whether we should use the GTK system theme.
+  // Whether we should use the GTK system theme and buttons.
   bool UseGtkTheme() const;
+  bool UseGtkButtons() const;
 
   // A wrapper around ThemeProvider::GetColor, transforming the result to a
   // GdkColor.
@@ -223,8 +224,9 @@
   CHROMEGTK_CALLBACK_1(GtkThemeProvider, gboolean, OnSeparatorExpose,
                        GdkEventExpose*);
 
-  // Whether we should be using gtk rendering.
+  // Whether we should be using gtk rendering and buttons
   bool use_gtk_;
+  bool use_gtk_buttons_;
 
   // GtkWidgets that exist only so we can look at their properties (and take
   // their colors).
Index: src/chrome/browser/ui/gtk/custom_button.cc
===================================================================
--- src.orig/chrome/browser/ui/gtk/custom_button.cc	2010-09-30 20:04:24.000000000 +0200
+++ src/chrome/browser/ui/gtk/custom_button.cc	2010-10-11 13:37:04.552393580 +0200
@@ -341,5 +341,5 @@
 }
 
 bool CustomDrawButton::UseGtkTheme() {
-  return theme_provider_ && theme_provider_->UseGtkTheme();
+  return theme_provider_ && theme_provider_->UseGtkButtons();
 }
Index: src/chrome/browser/ui/gtk/reload_button_gtk.cc
===================================================================
--- src.orig/chrome/browser/ui/gtk/reload_button_gtk.cc	2010-09-30 20:04:24.000000000 +0200
+++ src/chrome/browser/ui/gtk/reload_button_gtk.cc	2010-10-11 13:41:16.122390937 +0200
@@ -178,7 +178,7 @@
 
 gboolean ReloadButtonGtk::OnExpose(GtkWidget* widget,
                                    GdkEventExpose* e) {
-  if (theme_provider_ && theme_provider_->UseGtkTheme())
+  if (theme_provider_ && theme_provider_->UseGtkButtons())
     return FALSE;
   return ((visible_mode_ == MODE_RELOAD) ? reload_ : stop_).OnExpose(
       widget, e, hover_controller_.GetCurrentValue());
@@ -206,9 +206,9 @@
 }
 
 void ReloadButtonGtk::UpdateThemeButtons() {
-  bool use_gtk = theme_provider_ && theme_provider_->UseGtkTheme();
+  bool use_gtk_buttons = theme_provider_ && theme_provider_->UseGtkButtons();
 
-  if (use_gtk) {
+  if (use_gtk_buttons) {
     gtk_widget_ensure_style(widget());
     GtkIconSet* icon_set = gtk_style_lookup_icon_set(
         widget()->style,
@@ -251,5 +251,5 @@
     gtk_widget_set_double_buffered(widget(), FALSE);
   }
 
-  gtk_chrome_button_set_use_gtk_rendering(GTK_CHROME_BUTTON(widget()), use_gtk);
+  gtk_chrome_button_set_use_gtk_rendering(GTK_CHROME_BUTTON(widget()), use_gtk_buttons);
 }
