dlopen the sonamed libs directly, like it has already been done for libGL.so.1,
as we don't want to Depend on the -dev packages for the .so files:
- libosmesa.so.6: was already available in Hardy
- libGLESv2.so.1 and libEGL.so.1: available only since Maverick

---
 ui/gfx/gl/gl_implementation_linux.cc |    6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

Index: src/ui/gfx/gl/gl_implementation_linux.cc
===================================================================
--- src.orig/ui/gfx/gl/gl_implementation_linux.cc
+++ src/ui/gfx/gl/gl_implementation_linux.cc
@@ -56,17 +56,17 @@
     case kGLImplementationOSMesaGL: {
       FilePath module_path;
       if (!PathService::Get(base::DIR_MODULE, &module_path)) {
         LOG(ERROR) << "PathService::Get failed.";
         return false;
       }
 
       base::NativeLibrary library = LoadLibrary(
-          module_path.Append("libosmesa.so"));
+          module_path.Append("libosmesa.so.6"));
       if (!library)
         return false;
 
       GLGetProcAddressProc get_proc_address =
           reinterpret_cast<GLGetProcAddressProc>(
               base::GetFunctionPointerFromNativeLibrary(
                   library, "OSMesaGetProcAddress"));
       if (!get_proc_address) {
@@ -102,20 +102,20 @@
       AddGLNativeLibrary(library);
       SetGLImplementation(kGLImplementationDesktopGL);
 
       InitializeGLBindingsGL();
       InitializeGLBindingsGLX();
       break;
     }
     case kGLImplementationEGLGLES2: {
-      base::NativeLibrary gles_library = LoadLibrary("libGLESv2.so");
+      base::NativeLibrary gles_library = LoadLibrary("libGLESv2.so.2");
       if (!gles_library)
         return false;
-      base::NativeLibrary egl_library = LoadLibrary("libEGL.so");
+      base::NativeLibrary egl_library = LoadLibrary("libEGL.so.1");
       if (!egl_library) {
         base::UnloadNativeLibrary(gles_library);
         return false;
       }
 
       GLGetProcAddressProc get_proc_address =
           reinterpret_cast<GLGetProcAddressProc>(
               base::GetFunctionPointerFromNativeLibrary(
