# Backport of http://code.google.com/p/chromium/issues/detail?id=83397

---
 base/i18n/rtl.cc                   |   10 +++++++++-
 ui/base/l10n/l10n_util.cc          |   20 ++++++++++++++------
 ui/base/l10n/l10n_util_unittest.cc |   17 +++++++++++++++++
 3 files changed, 40 insertions(+), 7 deletions(-)

Index: src/base/i18n/rtl.cc
===================================================================
--- src.orig/base/i18n/rtl.cc
+++ src/base/i18n/rtl.cc
@@ -15,29 +15,37 @@
 #include "unicode/uscript.h"
 
 #if defined(TOOLKIT_USES_GTK)
 #include <gtk/gtk.h>
 #endif
 
 namespace {
 
-// Extract language and country, ignore keywords, concatenate using dash.
+// Extract language, country and variant, but ignore keywords.  For example,
+// en-US, ca@valencia, ca-ES@valencia.
 std::string GetLocaleString(const icu::Locale& locale) {
   const char* language = locale.getLanguage();
   const char* country = locale.getCountry();
+  const char* variant = locale.getVariant();
 
   std::string result =
       (language != NULL && *language != '\0') ? language : "und";
 
   if (country != NULL && *country != '\0') {
     result += '-';
     result += country;
   }
 
+  if (variant != NULL && *variant != '\0') {
+    std::string variant_str(variant);
+    StringToLowerASCII(&variant_str);
+    result += '@' + variant_str;
+  }
+
   return result;
 }
 
 }  // namespace
 
 namespace base {
 namespace i18n {
 
Index: src/ui/base/l10n/l10n_util.cc
===================================================================
--- src.orig/ui/base/l10n/l10n_util.cc
+++ src/ui/base/l10n/l10n_util.cc
@@ -253,38 +253,46 @@
 
 bool CheckAndResolveLocale(const std::string& locale,
                            const FilePath& locale_path,
                            std::string* resolved_locale) {
   if (IsLocaleAvailable(locale, locale_path)) {
     *resolved_locale = locale;
     return true;
   }
+
+  // If there's a variant, skip over it so we can try without the region
+  // code.  For example, ca_ES@valencia should cause us to try ca@valencia
+  // before ca.
+  std::string::size_type variant_pos = locale.find('@');
+  if (variant_pos != std::string::npos)
+    return false;
+
   // If the locale matches language but not country, use that instead.
   // TODO(jungshik) : Nothing is done about languages that Chrome
   // does not support but available on Windows. We fall
   // back to en-US in GetApplicationLocale so that it's a not critical,
   // but we can do better.
   std::string::size_type hyphen_pos = locale.find('-');
   if (hyphen_pos != std::string::npos && hyphen_pos > 0) {
     std::string lang(locale, 0, hyphen_pos);
     std::string region(locale, hyphen_pos + 1);
     std::string tmp_locale(lang);
     // Map es-RR other than es-ES to es-419 (Chrome's Latin American
     // Spanish locale).
     if (LowerCaseEqualsASCII(lang, "es") && !LowerCaseEqualsASCII(region, "es"))
       tmp_locale.append("-419");
     else if (LowerCaseEqualsASCII(lang, "zh")) {
       // Map zh-HK and zh-MO to zh-TW. Otherwise, zh-FOO is mapped to zh-CN.
-     if (LowerCaseEqualsASCII(region, "hk") ||
-         LowerCaseEqualsASCII(region, "mo")) { // Macao
-       tmp_locale.append("-TW");
-     } else {
-       tmp_locale.append("-CN");
-     }
+      if (LowerCaseEqualsASCII(region, "hk") ||
+          LowerCaseEqualsASCII(region, "mo")) { // Macao
+        tmp_locale.append("-TW");
+      } else {
+        tmp_locale.append("-CN");
+      }
     }
     if (IsLocaleAvailable(tmp_locale, locale_path)) {
       resolved_locale->swap(tmp_locale);
       return true;
     }
   }
 
   // Google updater uses no, iw and en for our nb, he, and en-US.
Index: src/ui/base/l10n/l10n_util_unittest.cc
===================================================================
--- src.orig/ui/base/l10n/l10n_util_unittest.cc
+++ src/ui/base/l10n/l10n_util_unittest.cc
@@ -135,16 +135,18 @@
     "es-419",
     "es",
     "zh-TW",
     "zh-CN",
     "he",
     "fil",
     "nb",
     "am",
+    "ca",
+    "ca@valencia",
   };
 
 #if defined(OS_WIN)
   static const char kLocaleFileExtension[] = ".dll";
 #elif defined(OS_POSIX)
   static const char kLocaleFileExtension[] = ".pak";
 #endif
   for (size_t i = 0; i < arraysize(filenames); ++i) {
@@ -188,16 +190,31 @@
   EXPECT_EQ("fr", l10n_util::GetApplicationLocale(""));
   env->UnSetVar("LANGUAGE");
   EXPECT_EQ("es", l10n_util::GetApplicationLocale(""));
   env->UnSetVar("LC_ALL");
   EXPECT_EQ("he", l10n_util::GetApplicationLocale(""));
   env->UnSetVar("LC_MESSAGES");
   EXPECT_EQ("nb", l10n_util::GetApplicationLocale(""));
   env->UnSetVar("LANG");
+
+  SetDefaultLocaleForTest("ca", env.get());
+  EXPECT_EQ("ca", l10n_util::GetApplicationLocale(""));
+
+  SetDefaultLocaleForTest("ca-ES", env.get());
+  EXPECT_EQ("ca", l10n_util::GetApplicationLocale(""));
+
+  SetDefaultLocaleForTest("ca@valencia", env.get());
+  EXPECT_EQ("ca@valencia", l10n_util::GetApplicationLocale(""));
+
+  SetDefaultLocaleForTest("ca_ES@valencia", env.get());
+  EXPECT_EQ("ca@valencia", l10n_util::GetApplicationLocale(""));
+
+  SetDefaultLocaleForTest("ca_ES.UTF8@valencia", env.get());
+  EXPECT_EQ("ca@valencia", l10n_util::GetApplicationLocale(""));
 #endif  // defined(OS_POSIX) && !defined(OS_CHROMEOS)
 
   SetDefaultLocaleForTest("en-US", env.get());
   EXPECT_EQ("en-US", l10n_util::GetApplicationLocale(""));
 
   SetDefaultLocaleForTest("xx", env.get());
   EXPECT_EQ("en-US", l10n_util::GetApplicationLocale(""));
 
