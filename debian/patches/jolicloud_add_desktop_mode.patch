Index: src/chrome/browser/ui/browser.cc
===================================================================
--- src.orig/chrome/browser/ui/browser.cc	2012-11-12 13:28:24.000000000 +0000
+++ src/chrome/browser/ui/browser.cc	2012-11-12 16:43:33.194171436 +0000
@@ -332,6 +332,15 @@
 }
 
 // static
+Browser::CreateParams Browser::CreateParams::CreateForAppDesktop(
+    const std::string& app_name,
+    Profile* profile) {
+  CreateParams params(TYPE_DESKTOP, profile);
+  params.app_name = app_name;
+  return params;
+}
+
+// static
 Browser::CreateParams Browser::CreateParams::CreateForDevTools(
     Profile* profile) {
   CreateParams params(TYPE_POPUP, profile);
@@ -539,11 +548,6 @@
   return name;
 }
 
-GURL Browser::GetURLForCurrentTab() const {
-  WebContents* contents = chrome::GetActiveWebContents(this);
-  return contents ? contents->GetURL() : GURL();
-}
-
 ///////////////////////////////////////////////////////////////////////////////
 // Getters & Setters
 
@@ -582,7 +586,7 @@
 }
 
 GURL Browser::GetURLForCurrentTab() const {
-  WebContents* contents = GetActiveWebContents();
+  WebContents* contents = chrome::GetActiveWebContents(this);
   // |contents| can be NULL because GetWindowTitleForCurrentTab is called by the
   // window during the window's creation (before tabs have been added).
   return contents ? contents->GetURL() : GURL();
@@ -628,7 +632,9 @@
 // Browser, OnBeforeUnload handling:
 
 bool Browser::ShouldCloseWindow() {
-  if (!CanCloseWithInProgressDownloads())
+  if (!CanCloseWithInProgressDownloads()
+      || (is_type_desktop() && !unload_controller_->HasReceivedKillSignal())
+  )
     return false;
 
   return unload_controller_->ShouldCloseWindow();
@@ -2120,25 +2126,6 @@
       }
     }
   }
-
-  // We need to register the app-icon pref.
-  std::string icon_pref(prefs::kBrowserWindowIcon);
-  icon_pref.append("_");
-  icon_pref.append(app_name);
-  prefs->RegisterFilePathPref(icon_pref.c_str(), FilePath(),
-			      PrefService::UNSYNCABLE_PREF);
-}
-
-void Browser::RegisterAppDesktopPrefs(const std::string& app_name, Profile* profile) {
-  // We need to register the window position pref.
-  std::string window_pref(prefs::kBrowserWindowPlacement);
-  window_pref.append("_");
-  window_pref.append(app_name);
-  PrefService* prefs = profile->GetPrefs();
-  if (!prefs->FindPreference(window_pref.c_str())) {
-    prefs->RegisterDictionaryPref(window_pref.c_str(),
-                                  PrefService::UNSYNCABLE_PREF);
-  }
 }
 
 ///////////////////////////////////////////////////////////////////////////////
@@ -2245,6 +2232,14 @@
 
     if (!is_app())
       features |= FEATURE_LOCATIONBAR;
+
+    if (is_type_desktop()) {
+      features &= ~FEATURE_BOOKMARKBAR;
+      features &= ~FEATURE_TITLEBAR;
+      features &= ~FEATURE_TABSTRIP;
+      features &= ~FEATURE_TOOLBAR;
+      features &= ~FEATURE_LOCATIONBAR;
+    }
   }
   return !!(features & feature);
 }
Index: src/chrome/browser/ui/browser.h
===================================================================
--- src.orig/chrome/browser/ui/browser.h	2012-11-12 13:40:34.000000000 +0000
+++ src/chrome/browser/ui/browser.h	2012-11-12 16:43:46.650170932 +0000
@@ -114,7 +114,8 @@
     // BrowserTest.StartMaximized.
     TYPE_TABBED = 1,
     TYPE_POPUP = 2,
-    TYPE_PANEL = 3
+    TYPE_PANEL = 3,
+    TYPE_DESKTOP = 4
   };
 
   // Distinguishes between browsers that host an app (opened from
@@ -168,6 +169,11 @@
                                      const gfx::Rect& window_bounds,
                                      Profile* profile);
 
+    // Like Create, but creates a tabstrip-less and toolbar-less "app" window for
+    // the specified app, as the user's desktop.
+    static CreateParams CreateForAppDesktop(const std::string& app_name,
+                                            Profile* profile);
+
     static CreateParams CreateForDevTools(Profile* profile);
 
     // The browser type.
@@ -464,6 +470,7 @@
   bool is_type_tabbed() const { return type_ == TYPE_TABBED; }
   bool is_type_popup() const { return type_ == TYPE_POPUP; }
   bool is_type_panel() const { return type_ == TYPE_PANEL; }
+  bool is_type_desktop() const { return type_ == TYPE_DESKTOP; }
 
   bool is_app() const;
   bool is_devtools() const;
@@ -770,8 +777,6 @@
 
   void TabDetachedAtImpl(TabContents* contents, int index, DetachType type);
 
-  static void RegisterAppDesktopPrefs(const std::string& app_name, Profile* profile);
-
   // Shared code between Reload() and ReloadIgnoringCache().
   void ReloadInternal(WindowOpenDisposition disposition, bool ignore_cache);
 
Index: src/chrome/browser/ui/gtk/browser_window_gtk.cc
===================================================================
--- src.orig/chrome/browser/ui/gtk/browser_window_gtk.cc	2012-11-12 10:39:05.000000000 +0000
+++ src/chrome/browser/ui/gtk/browser_window_gtk.cc	2012-11-12 16:48:52.926159410 +0000
@@ -935,6 +935,42 @@
   return fullscreen_exit_bubble_ != NULL;
 }
 
+void BrowserWindowGtk::ResizeToDesktopSize() {
+  GdkScreen* gdkScreen = gtk_window_get_screen(window_);
+  GdkRectangle rect;
+
+  gdk_screen_get_monitor_geometry(gdkScreen, 0, &rect);
+
+  // Decrease the desktop size by the size of the gnome-panel.
+  // FIXME: Figure this out properly!
+  rect.y = 24;
+  rect.height -= rect.y;
+
+  gtk_window_move( window_, rect.x, rect.y );
+  gtk_window_resize( window_, rect.width, rect.height );
+}
+
+gboolean OnVisibilityNotify(GtkWindow* window, GdkEventVisibility* event,
+                             BrowserWindowGtk* browser_win) {
+  /* If we are a desktop window, this expose event may have been
+     triggered by a change in the screen dimensions, so resize.
+  */
+  if (window == browser_win->window() && gtk_window_get_type_hint(window) == GDK_WINDOW_TYPE_HINT_DESKTOP) {
+    browser_win->ResizeToDesktopSize();
+    return TRUE;
+  }
+  return FALSE;
+}
+
+void BrowserWindowGtk::SetDesktop() {
+  ResizeToDesktopSize();
+  gtk_window_activate_focus( window_ );
+  gtk_window_set_type_hint( window_, GDK_WINDOW_TYPE_HINT_DESKTOP );
+  gtk_window_set_skip_taskbar_hint( window_, FALSE );
+  gtk_window_set_skip_pager_hint( window_, FALSE );
+  g_signal_connect(G_OBJECT(window_), "visibility-notify-event", G_CALLBACK(OnVisibilityNotify), this);
+}
+
 LocationBar* BrowserWindowGtk::GetLocationBar() const {
   return toolbar_->GetLocationBar();
 }
@@ -2051,6 +2087,12 @@
 
   if (chrome::ShouldSaveWindowPlacement(browser_.get()))
     chrome::SaveWindowPlacement(browser_.get(), restored_bounds_, show_state);
+  else {
+    // Do not continue with SaveWindowPosition() if the previous
+    // ShouldSaveWindowPlacement() returns false, such is the case when
+    // running in desktop mode: window preference settings will crash <!>
+    return;
+  }
 
   // We also need to save the placement for startup.
   // This is a web of calls between views and delegates on Windows, but the
Index: src/ui/base/x/x11_util.cc
===================================================================
--- src.orig/ui/base/x/x11_util.cc	2012-11-07 10:23:35.000000000 +0000
+++ src/ui/base/x/x11_util.cc	2012-11-12 14:07:54.418522775 +0000
@@ -688,6 +688,36 @@
 #endif
 }
 
+bool ChangeProperty(
+    XID window, const std::string& property_name, const std::string& set_name) {
+  Atom property_atom = gdk_x11_get_xatom_by_name_for_display(
+      gdk_display_get_default(), property_name.c_str());
+  Atom set_atom = gdk_x11_get_xatom_by_name_for_display(
+      gdk_display_get_default(), set_name.c_str());
+  Atom type = XA_ATOM;
+  int format = 32;
+  int mode = PropModeReplace;
+  long unsigned int num_items = 1;
+
+  LOG(INFO) << "Setting X desktop mode hint";
+
+  int result = XChangeProperty( GDK_DISPLAY_XDISPLAY( gdk_display_get_default() ),
+                                window,
+                                property_atom,
+                                type,
+                                format,
+                                mode,
+                                (guchar*) &set_atom,
+                                num_items);
+
+  LOG(INFO) << "XChangeProperty returned: " << result;
+
+  if (result != Success)
+    return false;
+
+  return true;
+}
+
 XID GetParentWindow(XID window) {
   XID root = None;
   XID parent = None;
Index: src/ui/base/x/x11_util.h
===================================================================
--- src.orig/ui/base/x/x11_util.h	2012-11-07 10:23:35.000000000 +0000
+++ src/ui/base/x/x11_util.h	2012-11-12 14:07:54.418522775 +0000
@@ -146,6 +146,8 @@
                                     std::vector<Atom>* value);
 UI_EXPORT bool GetStringProperty(
     XID window, const std::string& property_name, std::string* value);
+bool ChangeProperty(
+    XID window, const std::string& property_name, const std::string& set_name);
 
 UI_EXPORT bool SetIntProperty(XID window,
                               const std::string& name,
Index: src/chrome/browser/ui/browser_window.h
===================================================================
--- src.orig/chrome/browser/ui/browser_window.h	2012-11-07 10:20:54.000000000 +0000
+++ src/chrome/browser/ui/browser_window.h	2012-11-12 14:07:54.418522775 +0000
@@ -148,6 +148,9 @@
   virtual bool IsInMetroSnapMode() const = 0;
 #endif
 
+  // Sets the desktop-mode state
+  virtual void SetDesktop() = 0;
+
   // Returns the location bar.
   virtual LocationBar* GetLocationBar() const = 0;
 
Index: src/chrome/browser/ui/gtk/browser_window_gtk.h
===================================================================
--- src.orig/chrome/browser/ui/gtk/browser_window_gtk.h	2012-11-07 10:20:45.000000000 +0000
+++ src/chrome/browser/ui/gtk/browser_window_gtk.h	2012-11-12 14:07:54.418522775 +0000
@@ -102,6 +102,8 @@
       FullscreenExitBubbleType bubble_type) OVERRIDE;
   virtual bool IsFullscreen() const OVERRIDE;
   virtual bool IsFullscreenBubbleVisible() const OVERRIDE;
+  void ResizeToDesktopSize();
+  virtual void SetDesktop();
   virtual LocationBar* GetLocationBar() const OVERRIDE;
   virtual void SetFocusToLocationBar(bool select_all) OVERRIDE;
   virtual void UpdateReloadStopState(bool is_loading, bool force) OVERRIDE;
Index: src/chrome/common/chrome_switches.cc
===================================================================
--- src.orig/chrome/common/chrome_switches.cc	2012-11-12 13:05:19.000000000 +0000
+++ src/chrome/common/chrome_switches.cc	2012-11-12 14:07:54.422522775 +0000
@@ -240,6 +240,9 @@
 // device management backend.
 const char kDeviceManagementUrl[]           = "device-management-url";
 
+// Specifies that the browser should be launched in "X Desktop" mode.
+const char kDesktop[]                       = "desktop";
+
 // Triggers a plethora of diagnostic modes.
 const char kDiagnostics[]                   = "diagnostics";
 
Index: src/chrome/common/chrome_switches.h
===================================================================
--- src.orig/chrome/common/chrome_switches.h	2012-11-12 13:05:19.000000000 +0000
+++ src/chrome/common/chrome_switches.h	2012-11-12 15:46:15.742300760 +0000
@@ -73,6 +73,7 @@
 extern const char kDebugDevToolsFrontend[];
 extern const char kDebugEnableFrameToggle[];
 extern const char kDebugPrint[];
+extern const char kDesktop[];
 extern const char kDemandUserScopeApproval[];
 extern const char kDeviceManagementUrl[];
 extern const char kDiagnostics[];
Index: src/chrome/browser/ui/panels/panel.cc
===================================================================
--- src.orig/chrome/browser/ui/panels/panel.cc	2012-11-07 10:20:43.000000000 +0000
+++ src/chrome/browser/ui/panels/panel.cc	2012-11-12 15:47:25.902298120 +0000
@@ -501,6 +501,10 @@
   return false;
 }
 
+void Panel::SetDesktop() {
+  NOTIMPLEMENTED();
+}
+
 void Panel::OnContentsAutoResized(const gfx::Size& new_content_size) {
   DCHECK(auto_resizable_);
   if (!panel_strip_)
Index: src/chrome/browser/ui/panels/panel.h
===================================================================
--- src.orig/chrome/browser/ui/panels/panel.h	2012-11-07 10:20:43.000000000 +0000
+++ src/chrome/browser/ui/panels/panel.h	2012-11-12 14:07:54.422522775 +0000
@@ -119,6 +119,7 @@
   virtual bool IsMaximized() const OVERRIDE;
   virtual bool IsMinimized() const OVERRIDE;
   virtual bool IsFullscreen() const OVERRIDE;
+  virtual void SetDesktop() OVERRIDE;
   virtual gfx::NativeWindow GetNativeWindow() OVERRIDE;
   virtual gfx::Rect GetRestoredBounds() const OVERRIDE;
   virtual gfx::Rect GetBounds() const OVERRIDE;
Index: src/chrome/browser/ui/cocoa/browser_window_cocoa.h
===================================================================
--- src.orig/chrome/browser/ui/cocoa/browser_window_cocoa.h	2012-11-07 10:20:53.000000000 +0000
+++ src/chrome/browser/ui/cocoa/browser_window_cocoa.h	2012-11-12 14:07:54.422522775 +0000
@@ -73,6 +73,7 @@
       FullscreenExitBubbleType bubble_type) OVERRIDE;
   virtual bool IsFullscreen() const OVERRIDE;
   virtual bool IsFullscreenBubbleVisible() const OVERRIDE;
+  virtual void SetDesktop();
   virtual LocationBar* GetLocationBar() const OVERRIDE;
   virtual void SetFocusToLocationBar(bool select_all) OVERRIDE;
   virtual void UpdateReloadStopState(bool is_loading, bool force) OVERRIDE;
Index: src/chrome/browser/ui/cocoa/browser_window_cocoa.mm
===================================================================
--- src.orig/chrome/browser/ui/cocoa/browser_window_cocoa.mm	2012-11-07 10:20:53.000000000 +0000
+++ src/chrome/browser/ui/cocoa/browser_window_cocoa.mm	2012-11-12 14:07:54.422522775 +0000
@@ -323,6 +323,10 @@
   return false;
 }
 
+void BrowserWindowCocoa::SetDesktop() {
+  NOTIMPLEMENTED();
+}
+
 void BrowserWindowCocoa::ConfirmAddSearchProvider(
     TemplateURL* template_url,
     Profile* profile) {
Index: src/chrome/browser/ui/panels/panel_browser_window_cocoa.h
===================================================================
--- src.orig/chrome/browser/ui/panels/panel_browser_window_cocoa.h	2012-11-07 10:20:43.000000000 +0000
+++ src/chrome/browser/ui/panels/panel_browser_window_cocoa.h	2012-11-12 14:07:54.430522775 +0000
@@ -61,6 +61,7 @@
   virtual void FullScreenModeChanged(bool is_full_screen) OVERRIDE;
   virtual Browser* GetPanelBrowser() const OVERRIDE;
   virtual void DestroyPanelBrowser() OVERRIDE;
+  virtual void SetDesktop() OVERRIDE;
   virtual void EnsurePanelFullyVisible() OVERRIDE;
   virtual void SetPanelAlwaysOnTop(bool on_top) OVERRIDE;
   virtual void EnableResizeByMouse(bool enable) OVERRIDE;
Index: src/chrome/browser/ui/extensions/application_launch.cc
===================================================================
--- src.orig/chrome/browser/ui/extensions/application_launch.cc	2012-11-12 14:03:12.000000000 +0000
+++ src/chrome/browser/ui/extensions/application_launch.cc	2012-11-12 15:52:23.086286940 +0000
@@ -70,6 +70,7 @@
     extension_misc::LaunchContainer container,
     const GURL& url_input,
     const FilePath& icon_id,
+    bool as_desktop,
     Browser** app_browser) {
   DCHECK(!url_input.is_empty() || extension);
   GURL url = UrlForExtension(extension, url_input);
@@ -87,6 +88,9 @@
     window_bounds.set_height(extension->launch_height());
   }
 
+  if (as_desktop)
+    type = Browser::TYPE_DESKTOP;
+
   Browser::CreateParams params(type, profile);
   params.app_name = app_name;
   params.initial_bounds = window_bounds;
@@ -117,6 +121,9 @@
     profile->GetPrefs()->SetFilePath(icon_pref_key.c_str(), icon_id);
   }
 
+  if (as_desktop)
+    browser->window()->SetDesktop();
+
   TabContents* tab_contents = chrome::AddSelectedTabWithURL(
       browser, url, content::PAGE_TRANSITION_START_PAGE);
   WebContents* contents = tab_contents->web_contents();
@@ -265,7 +272,7 @@
     case extension_misc::LAUNCH_PANEL:
     case extension_misc::LAUNCH_WINDOW:
       tab = OpenApplicationWindow(profile, extension, container,
-                                  override_url, empty_icon, NULL);
+                                  override_url, empty_icon, false, NULL);
       break;
     case extension_misc::LAUNCH_TAB: {
       tab = OpenApplicationTab(profile, extension, override_url,
@@ -281,6 +288,7 @@
 
 WebContents* OpenAppShortcutWindow(Profile* profile,
 				   const FilePath& icon_id,
+				   bool as_desktop,
                                    const GURL& url) {
   Browser* app_browser;
   WebContents* tab = OpenApplicationWindow(
@@ -289,6 +297,7 @@
       extension_misc::LAUNCH_WINDOW,
       url,
       icon_id,
+      as_desktop,
       &app_browser);
 
   if (!tab)
Index: src/chrome/browser/ui/extensions/application_launch.h
===================================================================
--- src.orig/chrome/browser/ui/extensions/application_launch.h	2012-11-12 14:04:22.000000000 +0000
+++ src/chrome/browser/ui/extensions/application_launch.h	2012-11-12 15:53:06.166285319 +0000
@@ -65,6 +65,7 @@
 // application_launch::OpenApplication().
 content::WebContents* OpenAppShortcutWindow(Profile* profile,
 					    const FilePath& icon_id,
+					    bool as_desktop,
                                             const GURL& url);
 
 }  // namespace application_launch
Index: src/chrome/browser/ui/startup/startup_browser_creator_impl.cc
===================================================================
--- src.orig/chrome/browser/ui/startup/startup_browser_creator_impl.cc	2012-11-12 14:07:12.000000000 +0000
+++ src/chrome/browser/ui/startup/startup_browser_creator_impl.cc	2012-11-12 16:49:10.802158737 +0000
@@ -365,7 +365,8 @@
 
     if (process_startup) {
       if (browser_defaults::kOSSupportsOtherBrowsers &&
-          !command_line_.HasSwitch(switches::kNoDefaultBrowserCheck)) {
+          !command_line_.HasSwitch(switches::kNoDefaultBrowserCheck) &&
+	  !IsDesktopLaunch()) {
         // Generally, the default browser prompt should not be shown on first
         // run. However, when the set-as-default dialog has been suppressed, we
         // need to allow it.
@@ -450,6 +451,13 @@
   return (app_tab != NULL);
 }
 
+bool StartupBrowserCreatorImpl::IsDesktopLaunch() {
+  if (command_line_.HasSwitch(switches::kDesktop)) {
+    return true;
+  }
+  return false;
+}
+
 bool StartupBrowserCreatorImpl::OpenApplicationWindow(
     Profile* profile,
     content::WebContents** out_app_contents) {
@@ -515,11 +523,12 @@
             extension_misc::APP_LAUNCH_CMD_LINE_APP_LEGACY);
       }
 
-      std::string icon_id(command_line_.GetSwitchValueASCII(switches::kIconId);
+      std::string icon_id(command_line_.GetSwitchValueASCII(switches::kIconId));
 
       WebContents* app_tab = application_launch::OpenAppShortcutWindow(
           profile,
 	  FilePath(icon_id),
+	  IsDesktopLaunch(),
           url);
 
       if (out_app_contents)
Index: src/chrome/browser/ui/startup/startup_browser_creator_impl.h
===================================================================
--- src.orig/chrome/browser/ui/startup/startup_browser_creator_impl.h	2012-11-07 10:20:51.000000000 +0000
+++ src/chrome/browser/ui/startup/startup_browser_creator_impl.h	2012-11-12 14:07:54.434522775 +0000
@@ -73,6 +73,9 @@
   // In this case |app_url| or |app_id| are populated if they're non-null.
   bool IsAppLaunch(std::string* app_url, std::string* app_id);
 
+  // If the process was launched with the desktop flag, return true.
+  bool IsDesktopLaunch();
+
   // If IsAppLaunch is true, tries to open an application window.
   // If the app is specified to start in a tab, or IsAppLaunch is false,
   // returns false to specify default processing. |out_app_contents| is an
Index: src/chrome/browser/ui/panels/panel_browser_window.h
===================================================================
--- src.orig/chrome/browser/ui/panels/panel_browser_window.h	2012-11-07 10:20:43.000000000 +0000
+++ src/chrome/browser/ui/panels/panel_browser_window.h	2012-11-12 14:07:54.434522775 +0000
@@ -73,6 +73,7 @@
       const GURL& url,
       FullscreenExitBubbleType bubble_type) OVERRIDE;
   virtual bool IsFullscreenBubbleVisible() const OVERRIDE;
+  virtual void SetDesktop() OVERRIDE;
   virtual LocationBar* GetLocationBar() const OVERRIDE;
   virtual void SetFocusToLocationBar(bool select_all) OVERRIDE;
   virtual void UpdateReloadStopState(bool is_loading, bool force) OVERRIDE;
Index: src/chrome/browser/ui/panels/panel_browser_window.cc
===================================================================
--- src.orig/chrome/browser/ui/panels/panel_browser_window.cc	2012-11-07 10:20:43.000000000 +0000
+++ src/chrome/browser/ui/panels/panel_browser_window.cc	2012-11-12 14:07:54.434522775 +0000
@@ -198,6 +198,10 @@
   return false;
 }
 
+void PanelBrowserWindow::SetDesktop() {
+  NOTIMPLEMENTED();
+}
+
 LocationBar* PanelBrowserWindow::GetLocationBar() const {
 #if defined(USE_AURA)
   // TODO(stevenjb): Remove this when Aura panels are implemented post R18.
Index: src/chrome/browser/ui/browser_window_state.cc
===================================================================
--- src.orig/chrome/browser/ui/browser_window_state.cc	2012-11-07 10:20:54.000000000 +0000
+++ src/chrome/browser/ui/browser_window_state.cc	2012-11-12 15:36:39.078322455 +0000
@@ -60,6 +60,7 @@
     return browser_defaults::kRestorePopups || browser->is_devtools() ||
         browser->is_app();
   case Browser::TYPE_PANEL:
+  case Browser::TYPE_DESKTOP:
     // Do not save the window placement of panels.
     return false;
   default:
Index: src/chrome/browser/ui/unload_controller.cc
===================================================================
--- src.orig/chrome/browser/ui/unload_controller.cc	2012-11-07 10:20:54.000000000 +0000
+++ src/chrome/browser/ui/unload_controller.cc	2012-11-12 16:46:31.690164723 +0000
@@ -24,6 +24,7 @@
 UnloadController::UnloadController(Browser* browser)
     : browser_(browser),
       is_attempting_to_close_browser_(false),
+      kill_signal_(0),
       ALLOW_THIS_IN_INITIALIZER_LIST(weak_factory_(this)) {
   browser_->tab_strip_model()->AddObserver(this);
 }
@@ -37,6 +38,8 @@
   // that avoids the fast shutdown path where we just kill all the renderers.
   if (is_attempting_to_close_browser_)
     ClearUnloadState(contents, true);
+  if (browser_->is_type_desktop() && !kill_signal_)
+    return false;
   return !is_attempting_to_close_browser_;
 }
 
@@ -48,6 +51,10 @@
     return proceed;
   }
 
+  if (browser_->is_type_desktop() && !kill_signal_) {
+    proceed = false;
+  }
+
   if (!proceed) {
     CancelWindowClose();
     contents->SetClosedByUserGesture(false);
Index: src/chrome/browser/ui/unload_controller.h
===================================================================
--- src.orig/chrome/browser/ui/unload_controller.h	2012-11-07 10:20:54.000000000 +0000
+++ src/chrome/browser/ui/unload_controller.h	2012-11-12 16:46:06.290165679 +0000
@@ -45,6 +45,8 @@
   // its BeforeUnloadHandler.
   bool BeforeUnloadFired(content::WebContents* contents, bool proceed);
 
+  bool HasReceivedKillSignal() { return kill_signal_ != 0; }
+
   bool is_attempting_to_close_browser() const {
     return is_attempting_to_close_browser_;
   }
@@ -128,6 +130,8 @@
   // Browser window isn't just immediately closed.
   bool is_attempting_to_close_browser_;
 
+  int kill_signal_;
+
   base::WeakPtrFactory<UnloadController> weak_factory_;
 
   DISALLOW_COPY_AND_ASSIGN(UnloadController);
